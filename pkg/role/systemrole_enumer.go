// Code generated by "enumer -type SystemRole -trimprefix SystemRole -linecomment -json -text -transform lower"; DO NOT EDIT.

package role

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SystemRoleName = "bootstrapbooti18nkernelmonitoringmotdnetworkingnixopensshshelltimeuservirtualizationwslx11"

var _SystemRoleIndex = [...]uint8{0, 9, 13, 17, 23, 33, 37, 47, 50, 57, 62, 66, 70, 84, 87, 90}

const _SystemRoleLowerName = "bootstrapbooti18nkernelmonitoringmotdnetworkingnixopensshshelltimeuservirtualizationwslx11"

func (i SystemRole) String() string {
	if i >= SystemRole(len(_SystemRoleIndex)-1) {
		return fmt.Sprintf("SystemRole(%d)", i)
	}
	return _SystemRoleName[_SystemRoleIndex[i]:_SystemRoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SystemRoleNoOp() {
	var x [1]struct{}
	_ = x[SystemRoleBootstrap-(0)]
	_ = x[SystemRoleBoot-(1)]
	_ = x[SystemRoleI18N-(2)]
	_ = x[SystemRoleKernel-(3)]
	_ = x[SystemRoleMonitoring-(4)]
	_ = x[SystemRoleMotd-(5)]
	_ = x[SystemRoleNetworking-(6)]
	_ = x[SystemRoleNix-(7)]
	_ = x[SystemRoleOpenSsh-(8)]
	_ = x[SystemRoleShell-(9)]
	_ = x[SystemRoleTime-(10)]
	_ = x[SystemRoleUser-(11)]
	_ = x[SystemRoleVirtualization-(12)]
	_ = x[SystemRoleWsl-(13)]
	_ = x[SystemRoleX11-(14)]
}

var _SystemRoleValues = []SystemRole{SystemRoleBootstrap, SystemRoleBoot, SystemRoleI18N, SystemRoleKernel, SystemRoleMonitoring, SystemRoleMotd, SystemRoleNetworking, SystemRoleNix, SystemRoleOpenSsh, SystemRoleShell, SystemRoleTime, SystemRoleUser, SystemRoleVirtualization, SystemRoleWsl, SystemRoleX11}

var _SystemRoleNameToValueMap = map[string]SystemRole{
	_SystemRoleName[0:9]:        SystemRoleBootstrap,
	_SystemRoleLowerName[0:9]:   SystemRoleBootstrap,
	_SystemRoleName[9:13]:       SystemRoleBoot,
	_SystemRoleLowerName[9:13]:  SystemRoleBoot,
	_SystemRoleName[13:17]:      SystemRoleI18N,
	_SystemRoleLowerName[13:17]: SystemRoleI18N,
	_SystemRoleName[17:23]:      SystemRoleKernel,
	_SystemRoleLowerName[17:23]: SystemRoleKernel,
	_SystemRoleName[23:33]:      SystemRoleMonitoring,
	_SystemRoleLowerName[23:33]: SystemRoleMonitoring,
	_SystemRoleName[33:37]:      SystemRoleMotd,
	_SystemRoleLowerName[33:37]: SystemRoleMotd,
	_SystemRoleName[37:47]:      SystemRoleNetworking,
	_SystemRoleLowerName[37:47]: SystemRoleNetworking,
	_SystemRoleName[47:50]:      SystemRoleNix,
	_SystemRoleLowerName[47:50]: SystemRoleNix,
	_SystemRoleName[50:57]:      SystemRoleOpenSsh,
	_SystemRoleLowerName[50:57]: SystemRoleOpenSsh,
	_SystemRoleName[57:62]:      SystemRoleShell,
	_SystemRoleLowerName[57:62]: SystemRoleShell,
	_SystemRoleName[62:66]:      SystemRoleTime,
	_SystemRoleLowerName[62:66]: SystemRoleTime,
	_SystemRoleName[66:70]:      SystemRoleUser,
	_SystemRoleLowerName[66:70]: SystemRoleUser,
	_SystemRoleName[70:84]:      SystemRoleVirtualization,
	_SystemRoleLowerName[70:84]: SystemRoleVirtualization,
	_SystemRoleName[84:87]:      SystemRoleWsl,
	_SystemRoleLowerName[84:87]: SystemRoleWsl,
	_SystemRoleName[87:90]:      SystemRoleX11,
	_SystemRoleLowerName[87:90]: SystemRoleX11,
}

var _SystemRoleNames = []string{
	_SystemRoleName[0:9],
	_SystemRoleName[9:13],
	_SystemRoleName[13:17],
	_SystemRoleName[17:23],
	_SystemRoleName[23:33],
	_SystemRoleName[33:37],
	_SystemRoleName[37:47],
	_SystemRoleName[47:50],
	_SystemRoleName[50:57],
	_SystemRoleName[57:62],
	_SystemRoleName[62:66],
	_SystemRoleName[66:70],
	_SystemRoleName[70:84],
	_SystemRoleName[84:87],
	_SystemRoleName[87:90],
}

// SystemRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SystemRoleString(s string) (SystemRole, error) {
	if val, ok := _SystemRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SystemRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SystemRole values", s)
}

// SystemRoleValues returns all values of the enum
func SystemRoleValues() []SystemRole {
	return _SystemRoleValues
}

// SystemRoleStrings returns a slice of all String values of the enum
func SystemRoleStrings() []string {
	strs := make([]string, len(_SystemRoleNames))
	copy(strs, _SystemRoleNames)
	return strs
}

// IsASystemRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SystemRole) IsASystemRole() bool {
	for _, v := range _SystemRoleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SystemRole
func (i SystemRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SystemRole
func (i *SystemRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SystemRole should be a string, got %s", data)
	}

	var err error
	*i, err = SystemRoleString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SystemRole
func (i SystemRole) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SystemRole
func (i *SystemRole) UnmarshalText(text []byte) error {
	var err error
	*i, err = SystemRoleString(string(text))
	return err
}
