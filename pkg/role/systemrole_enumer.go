// Code generated by "enumer -type SystemRole -trimprefix SystemRole -linecomment -json -text -transform lower"; DO NOT EDIT.

package role

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SystemRoleName = "bootstrapbootgarudai18nkernelmonitoringmotdnetworkingnixopensshshelltimeuservirtualizationwslx11"

var _SystemRoleIndex = [...]uint8{0, 9, 13, 19, 23, 29, 39, 43, 53, 56, 63, 68, 72, 76, 90, 93, 96}

const _SystemRoleLowerName = "bootstrapbootgarudai18nkernelmonitoringmotdnetworkingnixopensshshelltimeuservirtualizationwslx11"

func (i SystemRole) String() string {
	if i >= SystemRole(len(_SystemRoleIndex)-1) {
		return fmt.Sprintf("SystemRole(%d)", i)
	}
	return _SystemRoleName[_SystemRoleIndex[i]:_SystemRoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SystemRoleNoOp() {
	var x [1]struct{}
	_ = x[SystemRoleBootstrap-(0)]
	_ = x[SystemRoleBoot-(1)]
	_ = x[SystemRoleGaruda-(2)]
	_ = x[SystemRoleI18N-(3)]
	_ = x[SystemRoleKernel-(4)]
	_ = x[SystemRoleMonitoring-(5)]
	_ = x[SystemRoleMotd-(6)]
	_ = x[SystemRoleNetworking-(7)]
	_ = x[SystemRoleNix-(8)]
	_ = x[SystemRoleOpenSsh-(9)]
	_ = x[SystemRoleShell-(10)]
	_ = x[SystemRoleTime-(11)]
	_ = x[SystemRoleUser-(12)]
	_ = x[SystemRoleVirtualization-(13)]
	_ = x[SystemRoleWsl-(14)]
	_ = x[SystemRoleX11-(15)]
}

var _SystemRoleValues = []SystemRole{SystemRoleBootstrap, SystemRoleBoot, SystemRoleGaruda, SystemRoleI18N, SystemRoleKernel, SystemRoleMonitoring, SystemRoleMotd, SystemRoleNetworking, SystemRoleNix, SystemRoleOpenSsh, SystemRoleShell, SystemRoleTime, SystemRoleUser, SystemRoleVirtualization, SystemRoleWsl, SystemRoleX11}

var _SystemRoleNameToValueMap = map[string]SystemRole{
	_SystemRoleName[0:9]:        SystemRoleBootstrap,
	_SystemRoleLowerName[0:9]:   SystemRoleBootstrap,
	_SystemRoleName[9:13]:       SystemRoleBoot,
	_SystemRoleLowerName[9:13]:  SystemRoleBoot,
	_SystemRoleName[13:19]:      SystemRoleGaruda,
	_SystemRoleLowerName[13:19]: SystemRoleGaruda,
	_SystemRoleName[19:23]:      SystemRoleI18N,
	_SystemRoleLowerName[19:23]: SystemRoleI18N,
	_SystemRoleName[23:29]:      SystemRoleKernel,
	_SystemRoleLowerName[23:29]: SystemRoleKernel,
	_SystemRoleName[29:39]:      SystemRoleMonitoring,
	_SystemRoleLowerName[29:39]: SystemRoleMonitoring,
	_SystemRoleName[39:43]:      SystemRoleMotd,
	_SystemRoleLowerName[39:43]: SystemRoleMotd,
	_SystemRoleName[43:53]:      SystemRoleNetworking,
	_SystemRoleLowerName[43:53]: SystemRoleNetworking,
	_SystemRoleName[53:56]:      SystemRoleNix,
	_SystemRoleLowerName[53:56]: SystemRoleNix,
	_SystemRoleName[56:63]:      SystemRoleOpenSsh,
	_SystemRoleLowerName[56:63]: SystemRoleOpenSsh,
	_SystemRoleName[63:68]:      SystemRoleShell,
	_SystemRoleLowerName[63:68]: SystemRoleShell,
	_SystemRoleName[68:72]:      SystemRoleTime,
	_SystemRoleLowerName[68:72]: SystemRoleTime,
	_SystemRoleName[72:76]:      SystemRoleUser,
	_SystemRoleLowerName[72:76]: SystemRoleUser,
	_SystemRoleName[76:90]:      SystemRoleVirtualization,
	_SystemRoleLowerName[76:90]: SystemRoleVirtualization,
	_SystemRoleName[90:93]:      SystemRoleWsl,
	_SystemRoleLowerName[90:93]: SystemRoleWsl,
	_SystemRoleName[93:96]:      SystemRoleX11,
	_SystemRoleLowerName[93:96]: SystemRoleX11,
}

var _SystemRoleNames = []string{
	_SystemRoleName[0:9],
	_SystemRoleName[9:13],
	_SystemRoleName[13:19],
	_SystemRoleName[19:23],
	_SystemRoleName[23:29],
	_SystemRoleName[29:39],
	_SystemRoleName[39:43],
	_SystemRoleName[43:53],
	_SystemRoleName[53:56],
	_SystemRoleName[56:63],
	_SystemRoleName[63:68],
	_SystemRoleName[68:72],
	_SystemRoleName[72:76],
	_SystemRoleName[76:90],
	_SystemRoleName[90:93],
	_SystemRoleName[93:96],
}

// SystemRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SystemRoleString(s string) (SystemRole, error) {
	if val, ok := _SystemRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SystemRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SystemRole values", s)
}

// SystemRoleValues returns all values of the enum
func SystemRoleValues() []SystemRole {
	return _SystemRoleValues
}

// SystemRoleStrings returns a slice of all String values of the enum
func SystemRoleStrings() []string {
	strs := make([]string, len(_SystemRoleNames))
	copy(strs, _SystemRoleNames)
	return strs
}

// IsASystemRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SystemRole) IsASystemRole() bool {
	for _, v := range _SystemRoleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SystemRole
func (i SystemRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SystemRole
func (i *SystemRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SystemRole should be a string, got %s", data)
	}

	var err error
	*i, err = SystemRoleString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SystemRole
func (i SystemRole) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SystemRole
func (i *SystemRole) UnmarshalText(text []byte) error {
	var err error
	*i, err = SystemRoleString(string(text))
	return err
}
