// Code generated by "enumer -type SystemRole -trimprefix SystemRole -linecomment -json -text"; DO NOT EDIT.

package role

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SystemRoleName = "BootstrapBootChocolateyCockpitDockerGarudaGlazeWMHomeManagerHyprlandI18NKDEKernelMonitoringMotdNetworkingNixOpenSshShellSudoTimeUdisks2UserWinGetWslXServerXrdp"

var _SystemRoleIndex = [...]uint8{0, 9, 13, 23, 30, 36, 42, 49, 60, 68, 72, 75, 81, 91, 95, 105, 108, 115, 120, 124, 128, 135, 139, 145, 148, 155, 159}

const _SystemRoleLowerName = "bootstrapbootchocolateycockpitdockergarudaglazewmhomemanagerhyprlandi18nkdekernelmonitoringmotdnetworkingnixopensshshellsudotimeudisks2userwingetwslxserverxrdp"

func (i SystemRole) String() string {
	if i >= SystemRole(len(_SystemRoleIndex)-1) {
		return fmt.Sprintf("SystemRole(%d)", i)
	}
	return _SystemRoleName[_SystemRoleIndex[i]:_SystemRoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SystemRoleNoOp() {
	var x [1]struct{}
	_ = x[SystemRoleBootstrap-(0)]
	_ = x[SystemRoleBoot-(1)]
	_ = x[SystemRoleChocolatey-(2)]
	_ = x[SystemRoleCockpit-(3)]
	_ = x[SystemRoleDocker-(4)]
	_ = x[SystemRoleGaruda-(5)]
	_ = x[SystemRoleGlazeWM-(6)]
	_ = x[SystemRoleHomeManager-(7)]
	_ = x[SystemRoleHyprland-(8)]
	_ = x[SystemRoleI18N-(9)]
	_ = x[SystemRoleKDE-(10)]
	_ = x[SystemRoleKernel-(11)]
	_ = x[SystemRoleMonitoring-(12)]
	_ = x[SystemRoleMotd-(13)]
	_ = x[SystemRoleNetworking-(14)]
	_ = x[SystemRoleNix-(15)]
	_ = x[SystemRoleOpenSsh-(16)]
	_ = x[SystemRoleShell-(17)]
	_ = x[SystemRoleSudo-(18)]
	_ = x[SystemRoleTime-(19)]
	_ = x[SystemRoleUdisks2-(20)]
	_ = x[SystemRoleUser-(21)]
	_ = x[SystemRoleWinGet-(22)]
	_ = x[SystemRoleWsl-(23)]
	_ = x[SystemRoleXServer-(24)]
	_ = x[SystemRoleXrdp-(25)]
}

var _SystemRoleValues = []SystemRole{SystemRoleBootstrap, SystemRoleBoot, SystemRoleChocolatey, SystemRoleCockpit, SystemRoleDocker, SystemRoleGaruda, SystemRoleGlazeWM, SystemRoleHomeManager, SystemRoleHyprland, SystemRoleI18N, SystemRoleKDE, SystemRoleKernel, SystemRoleMonitoring, SystemRoleMotd, SystemRoleNetworking, SystemRoleNix, SystemRoleOpenSsh, SystemRoleShell, SystemRoleSudo, SystemRoleTime, SystemRoleUdisks2, SystemRoleUser, SystemRoleWinGet, SystemRoleWsl, SystemRoleXServer, SystemRoleXrdp}

var _SystemRoleNameToValueMap = map[string]SystemRole{
	_SystemRoleName[0:9]:          SystemRoleBootstrap,
	_SystemRoleLowerName[0:9]:     SystemRoleBootstrap,
	_SystemRoleName[9:13]:         SystemRoleBoot,
	_SystemRoleLowerName[9:13]:    SystemRoleBoot,
	_SystemRoleName[13:23]:        SystemRoleChocolatey,
	_SystemRoleLowerName[13:23]:   SystemRoleChocolatey,
	_SystemRoleName[23:30]:        SystemRoleCockpit,
	_SystemRoleLowerName[23:30]:   SystemRoleCockpit,
	_SystemRoleName[30:36]:        SystemRoleDocker,
	_SystemRoleLowerName[30:36]:   SystemRoleDocker,
	_SystemRoleName[36:42]:        SystemRoleGaruda,
	_SystemRoleLowerName[36:42]:   SystemRoleGaruda,
	_SystemRoleName[42:49]:        SystemRoleGlazeWM,
	_SystemRoleLowerName[42:49]:   SystemRoleGlazeWM,
	_SystemRoleName[49:60]:        SystemRoleHomeManager,
	_SystemRoleLowerName[49:60]:   SystemRoleHomeManager,
	_SystemRoleName[60:68]:        SystemRoleHyprland,
	_SystemRoleLowerName[60:68]:   SystemRoleHyprland,
	_SystemRoleName[68:72]:        SystemRoleI18N,
	_SystemRoleLowerName[68:72]:   SystemRoleI18N,
	_SystemRoleName[72:75]:        SystemRoleKDE,
	_SystemRoleLowerName[72:75]:   SystemRoleKDE,
	_SystemRoleName[75:81]:        SystemRoleKernel,
	_SystemRoleLowerName[75:81]:   SystemRoleKernel,
	_SystemRoleName[81:91]:        SystemRoleMonitoring,
	_SystemRoleLowerName[81:91]:   SystemRoleMonitoring,
	_SystemRoleName[91:95]:        SystemRoleMotd,
	_SystemRoleLowerName[91:95]:   SystemRoleMotd,
	_SystemRoleName[95:105]:       SystemRoleNetworking,
	_SystemRoleLowerName[95:105]:  SystemRoleNetworking,
	_SystemRoleName[105:108]:      SystemRoleNix,
	_SystemRoleLowerName[105:108]: SystemRoleNix,
	_SystemRoleName[108:115]:      SystemRoleOpenSsh,
	_SystemRoleLowerName[108:115]: SystemRoleOpenSsh,
	_SystemRoleName[115:120]:      SystemRoleShell,
	_SystemRoleLowerName[115:120]: SystemRoleShell,
	_SystemRoleName[120:124]:      SystemRoleSudo,
	_SystemRoleLowerName[120:124]: SystemRoleSudo,
	_SystemRoleName[124:128]:      SystemRoleTime,
	_SystemRoleLowerName[124:128]: SystemRoleTime,
	_SystemRoleName[128:135]:      SystemRoleUdisks2,
	_SystemRoleLowerName[128:135]: SystemRoleUdisks2,
	_SystemRoleName[135:139]:      SystemRoleUser,
	_SystemRoleLowerName[135:139]: SystemRoleUser,
	_SystemRoleName[139:145]:      SystemRoleWinGet,
	_SystemRoleLowerName[139:145]: SystemRoleWinGet,
	_SystemRoleName[145:148]:      SystemRoleWsl,
	_SystemRoleLowerName[145:148]: SystemRoleWsl,
	_SystemRoleName[148:155]:      SystemRoleXServer,
	_SystemRoleLowerName[148:155]: SystemRoleXServer,
	_SystemRoleName[155:159]:      SystemRoleXrdp,
	_SystemRoleLowerName[155:159]: SystemRoleXrdp,
}

var _SystemRoleNames = []string{
	_SystemRoleName[0:9],
	_SystemRoleName[9:13],
	_SystemRoleName[13:23],
	_SystemRoleName[23:30],
	_SystemRoleName[30:36],
	_SystemRoleName[36:42],
	_SystemRoleName[42:49],
	_SystemRoleName[49:60],
	_SystemRoleName[60:68],
	_SystemRoleName[68:72],
	_SystemRoleName[72:75],
	_SystemRoleName[75:81],
	_SystemRoleName[81:91],
	_SystemRoleName[91:95],
	_SystemRoleName[95:105],
	_SystemRoleName[105:108],
	_SystemRoleName[108:115],
	_SystemRoleName[115:120],
	_SystemRoleName[120:124],
	_SystemRoleName[124:128],
	_SystemRoleName[128:135],
	_SystemRoleName[135:139],
	_SystemRoleName[139:145],
	_SystemRoleName[145:148],
	_SystemRoleName[148:155],
	_SystemRoleName[155:159],
}

// SystemRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SystemRoleString(s string) (SystemRole, error) {
	if val, ok := _SystemRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SystemRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SystemRole values", s)
}

// SystemRoleValues returns all values of the enum
func SystemRoleValues() []SystemRole {
	return _SystemRoleValues
}

// SystemRoleStrings returns a slice of all String values of the enum
func SystemRoleStrings() []string {
	strs := make([]string, len(_SystemRoleNames))
	copy(strs, _SystemRoleNames)
	return strs
}

// IsASystemRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SystemRole) IsASystemRole() bool {
	for _, v := range _SystemRoleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SystemRole
func (i SystemRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SystemRole
func (i *SystemRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SystemRole should be a string, got %s", data)
	}

	var err error
	*i, err = SystemRoleString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SystemRole
func (i SystemRole) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SystemRole
func (i *SystemRole) UnmarshalText(text []byte) error {
	var err error
	*i, err = SystemRoleString(string(text))
	return err
}
