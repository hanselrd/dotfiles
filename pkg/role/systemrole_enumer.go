// Code generated by "enumer -type SystemRole -trimprefix SystemRole -linecomment -json -text -transform lower"; DO NOT EDIT.

package role

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SystemRoleName = "bootstrapbootcockpitdockergarudaglazewmhome-managerhyprlandi18nkdekernelmonitoringmotdnetworkingnixopensshshellsudotimeudisks2userwingetwslxserverxrdp"

var _SystemRoleIndex = [...]uint8{0, 9, 13, 20, 26, 32, 39, 51, 59, 63, 66, 72, 82, 86, 96, 99, 106, 111, 115, 119, 126, 130, 136, 139, 146, 150}

const _SystemRoleLowerName = "bootstrapbootcockpitdockergarudaglazewmhome-managerhyprlandi18nkdekernelmonitoringmotdnetworkingnixopensshshellsudotimeudisks2userwingetwslxserverxrdp"

func (i SystemRole) String() string {
	if i >= SystemRole(len(_SystemRoleIndex)-1) {
		return fmt.Sprintf("SystemRole(%d)", i)
	}
	return _SystemRoleName[_SystemRoleIndex[i]:_SystemRoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SystemRoleNoOp() {
	var x [1]struct{}
	_ = x[SystemRoleBootstrap-(0)]
	_ = x[SystemRoleBoot-(1)]
	_ = x[SystemRoleCockpit-(2)]
	_ = x[SystemRoleDocker-(3)]
	_ = x[SystemRoleGaruda-(4)]
	_ = x[SystemRoleGlazeWM-(5)]
	_ = x[SystemRoleHomeManager-(6)]
	_ = x[SystemRoleHyprland-(7)]
	_ = x[SystemRoleI18N-(8)]
	_ = x[SystemRoleKDE-(9)]
	_ = x[SystemRoleKernel-(10)]
	_ = x[SystemRoleMonitoring-(11)]
	_ = x[SystemRoleMotd-(12)]
	_ = x[SystemRoleNetworking-(13)]
	_ = x[SystemRoleNix-(14)]
	_ = x[SystemRoleOpenSsh-(15)]
	_ = x[SystemRoleShell-(16)]
	_ = x[SystemRoleSudo-(17)]
	_ = x[SystemRoleTime-(18)]
	_ = x[SystemRoleUdisks2-(19)]
	_ = x[SystemRoleUser-(20)]
	_ = x[SystemRoleWinGet-(21)]
	_ = x[SystemRoleWsl-(22)]
	_ = x[SystemRoleXServer-(23)]
	_ = x[SystemRoleXrdp-(24)]
}

var _SystemRoleValues = []SystemRole{SystemRoleBootstrap, SystemRoleBoot, SystemRoleCockpit, SystemRoleDocker, SystemRoleGaruda, SystemRoleGlazeWM, SystemRoleHomeManager, SystemRoleHyprland, SystemRoleI18N, SystemRoleKDE, SystemRoleKernel, SystemRoleMonitoring, SystemRoleMotd, SystemRoleNetworking, SystemRoleNix, SystemRoleOpenSsh, SystemRoleShell, SystemRoleSudo, SystemRoleTime, SystemRoleUdisks2, SystemRoleUser, SystemRoleWinGet, SystemRoleWsl, SystemRoleXServer, SystemRoleXrdp}

var _SystemRoleNameToValueMap = map[string]SystemRole{
	_SystemRoleName[0:9]:          SystemRoleBootstrap,
	_SystemRoleLowerName[0:9]:     SystemRoleBootstrap,
	_SystemRoleName[9:13]:         SystemRoleBoot,
	_SystemRoleLowerName[9:13]:    SystemRoleBoot,
	_SystemRoleName[13:20]:        SystemRoleCockpit,
	_SystemRoleLowerName[13:20]:   SystemRoleCockpit,
	_SystemRoleName[20:26]:        SystemRoleDocker,
	_SystemRoleLowerName[20:26]:   SystemRoleDocker,
	_SystemRoleName[26:32]:        SystemRoleGaruda,
	_SystemRoleLowerName[26:32]:   SystemRoleGaruda,
	_SystemRoleName[32:39]:        SystemRoleGlazeWM,
	_SystemRoleLowerName[32:39]:   SystemRoleGlazeWM,
	_SystemRoleName[39:51]:        SystemRoleHomeManager,
	_SystemRoleLowerName[39:51]:   SystemRoleHomeManager,
	_SystemRoleName[51:59]:        SystemRoleHyprland,
	_SystemRoleLowerName[51:59]:   SystemRoleHyprland,
	_SystemRoleName[59:63]:        SystemRoleI18N,
	_SystemRoleLowerName[59:63]:   SystemRoleI18N,
	_SystemRoleName[63:66]:        SystemRoleKDE,
	_SystemRoleLowerName[63:66]:   SystemRoleKDE,
	_SystemRoleName[66:72]:        SystemRoleKernel,
	_SystemRoleLowerName[66:72]:   SystemRoleKernel,
	_SystemRoleName[72:82]:        SystemRoleMonitoring,
	_SystemRoleLowerName[72:82]:   SystemRoleMonitoring,
	_SystemRoleName[82:86]:        SystemRoleMotd,
	_SystemRoleLowerName[82:86]:   SystemRoleMotd,
	_SystemRoleName[86:96]:        SystemRoleNetworking,
	_SystemRoleLowerName[86:96]:   SystemRoleNetworking,
	_SystemRoleName[96:99]:        SystemRoleNix,
	_SystemRoleLowerName[96:99]:   SystemRoleNix,
	_SystemRoleName[99:106]:       SystemRoleOpenSsh,
	_SystemRoleLowerName[99:106]:  SystemRoleOpenSsh,
	_SystemRoleName[106:111]:      SystemRoleShell,
	_SystemRoleLowerName[106:111]: SystemRoleShell,
	_SystemRoleName[111:115]:      SystemRoleSudo,
	_SystemRoleLowerName[111:115]: SystemRoleSudo,
	_SystemRoleName[115:119]:      SystemRoleTime,
	_SystemRoleLowerName[115:119]: SystemRoleTime,
	_SystemRoleName[119:126]:      SystemRoleUdisks2,
	_SystemRoleLowerName[119:126]: SystemRoleUdisks2,
	_SystemRoleName[126:130]:      SystemRoleUser,
	_SystemRoleLowerName[126:130]: SystemRoleUser,
	_SystemRoleName[130:136]:      SystemRoleWinGet,
	_SystemRoleLowerName[130:136]: SystemRoleWinGet,
	_SystemRoleName[136:139]:      SystemRoleWsl,
	_SystemRoleLowerName[136:139]: SystemRoleWsl,
	_SystemRoleName[139:146]:      SystemRoleXServer,
	_SystemRoleLowerName[139:146]: SystemRoleXServer,
	_SystemRoleName[146:150]:      SystemRoleXrdp,
	_SystemRoleLowerName[146:150]: SystemRoleXrdp,
}

var _SystemRoleNames = []string{
	_SystemRoleName[0:9],
	_SystemRoleName[9:13],
	_SystemRoleName[13:20],
	_SystemRoleName[20:26],
	_SystemRoleName[26:32],
	_SystemRoleName[32:39],
	_SystemRoleName[39:51],
	_SystemRoleName[51:59],
	_SystemRoleName[59:63],
	_SystemRoleName[63:66],
	_SystemRoleName[66:72],
	_SystemRoleName[72:82],
	_SystemRoleName[82:86],
	_SystemRoleName[86:96],
	_SystemRoleName[96:99],
	_SystemRoleName[99:106],
	_SystemRoleName[106:111],
	_SystemRoleName[111:115],
	_SystemRoleName[115:119],
	_SystemRoleName[119:126],
	_SystemRoleName[126:130],
	_SystemRoleName[130:136],
	_SystemRoleName[136:139],
	_SystemRoleName[139:146],
	_SystemRoleName[146:150],
}

// SystemRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SystemRoleString(s string) (SystemRole, error) {
	if val, ok := _SystemRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SystemRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SystemRole values", s)
}

// SystemRoleValues returns all values of the enum
func SystemRoleValues() []SystemRole {
	return _SystemRoleValues
}

// SystemRoleStrings returns a slice of all String values of the enum
func SystemRoleStrings() []string {
	strs := make([]string, len(_SystemRoleNames))
	copy(strs, _SystemRoleNames)
	return strs
}

// IsASystemRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SystemRole) IsASystemRole() bool {
	for _, v := range _SystemRoleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SystemRole
func (i SystemRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SystemRole
func (i *SystemRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SystemRole should be a string, got %s", data)
	}

	var err error
	*i, err = SystemRoleString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SystemRole
func (i SystemRole) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SystemRole
func (i *SystemRole) UnmarshalText(text []byte) error {
	var err error
	*i, err = SystemRoleString(string(text))
	return err
}
