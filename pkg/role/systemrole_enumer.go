// Code generated by "enumer -type SystemRole -trimprefix SystemRole -linecomment -json -text -transform lower"; DO NOT EDIT.

package role

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SystemRoleName = "bootstrapbootchocolateycockpitdockergarudaglazewmhome-managerhyprlandi18nkdekernelmonitoringmotdnetworkingnixopensshshellsudotimeudisks2userwingetwslxserverxrdp"

var _SystemRoleIndex = [...]uint8{0, 9, 13, 23, 30, 36, 42, 49, 61, 69, 73, 76, 82, 92, 96, 106, 109, 116, 121, 125, 129, 136, 140, 146, 149, 156, 160}

const _SystemRoleLowerName = "bootstrapbootchocolateycockpitdockergarudaglazewmhome-managerhyprlandi18nkdekernelmonitoringmotdnetworkingnixopensshshellsudotimeudisks2userwingetwslxserverxrdp"

func (i SystemRole) String() string {
	if i >= SystemRole(len(_SystemRoleIndex)-1) {
		return fmt.Sprintf("SystemRole(%d)", i)
	}
	return _SystemRoleName[_SystemRoleIndex[i]:_SystemRoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SystemRoleNoOp() {
	var x [1]struct{}
	_ = x[SystemRoleBootstrap-(0)]
	_ = x[SystemRoleBoot-(1)]
	_ = x[SystemRoleChocolatey-(2)]
	_ = x[SystemRoleCockpit-(3)]
	_ = x[SystemRoleDocker-(4)]
	_ = x[SystemRoleGaruda-(5)]
	_ = x[SystemRoleGlazeWM-(6)]
	_ = x[SystemRoleHomeManager-(7)]
	_ = x[SystemRoleHyprland-(8)]
	_ = x[SystemRoleI18N-(9)]
	_ = x[SystemRoleKDE-(10)]
	_ = x[SystemRoleKernel-(11)]
	_ = x[SystemRoleMonitoring-(12)]
	_ = x[SystemRoleMotd-(13)]
	_ = x[SystemRoleNetworking-(14)]
	_ = x[SystemRoleNix-(15)]
	_ = x[SystemRoleOpenSsh-(16)]
	_ = x[SystemRoleShell-(17)]
	_ = x[SystemRoleSudo-(18)]
	_ = x[SystemRoleTime-(19)]
	_ = x[SystemRoleUdisks2-(20)]
	_ = x[SystemRoleUser-(21)]
	_ = x[SystemRoleWinGet-(22)]
	_ = x[SystemRoleWsl-(23)]
	_ = x[SystemRoleXServer-(24)]
	_ = x[SystemRoleXrdp-(25)]
}

var _SystemRoleValues = []SystemRole{SystemRoleBootstrap, SystemRoleBoot, SystemRoleChocolatey, SystemRoleCockpit, SystemRoleDocker, SystemRoleGaruda, SystemRoleGlazeWM, SystemRoleHomeManager, SystemRoleHyprland, SystemRoleI18N, SystemRoleKDE, SystemRoleKernel, SystemRoleMonitoring, SystemRoleMotd, SystemRoleNetworking, SystemRoleNix, SystemRoleOpenSsh, SystemRoleShell, SystemRoleSudo, SystemRoleTime, SystemRoleUdisks2, SystemRoleUser, SystemRoleWinGet, SystemRoleWsl, SystemRoleXServer, SystemRoleXrdp}

var _SystemRoleNameToValueMap = map[string]SystemRole{
	_SystemRoleName[0:9]:          SystemRoleBootstrap,
	_SystemRoleLowerName[0:9]:     SystemRoleBootstrap,
	_SystemRoleName[9:13]:         SystemRoleBoot,
	_SystemRoleLowerName[9:13]:    SystemRoleBoot,
	_SystemRoleName[13:23]:        SystemRoleChocolatey,
	_SystemRoleLowerName[13:23]:   SystemRoleChocolatey,
	_SystemRoleName[23:30]:        SystemRoleCockpit,
	_SystemRoleLowerName[23:30]:   SystemRoleCockpit,
	_SystemRoleName[30:36]:        SystemRoleDocker,
	_SystemRoleLowerName[30:36]:   SystemRoleDocker,
	_SystemRoleName[36:42]:        SystemRoleGaruda,
	_SystemRoleLowerName[36:42]:   SystemRoleGaruda,
	_SystemRoleName[42:49]:        SystemRoleGlazeWM,
	_SystemRoleLowerName[42:49]:   SystemRoleGlazeWM,
	_SystemRoleName[49:61]:        SystemRoleHomeManager,
	_SystemRoleLowerName[49:61]:   SystemRoleHomeManager,
	_SystemRoleName[61:69]:        SystemRoleHyprland,
	_SystemRoleLowerName[61:69]:   SystemRoleHyprland,
	_SystemRoleName[69:73]:        SystemRoleI18N,
	_SystemRoleLowerName[69:73]:   SystemRoleI18N,
	_SystemRoleName[73:76]:        SystemRoleKDE,
	_SystemRoleLowerName[73:76]:   SystemRoleKDE,
	_SystemRoleName[76:82]:        SystemRoleKernel,
	_SystemRoleLowerName[76:82]:   SystemRoleKernel,
	_SystemRoleName[82:92]:        SystemRoleMonitoring,
	_SystemRoleLowerName[82:92]:   SystemRoleMonitoring,
	_SystemRoleName[92:96]:        SystemRoleMotd,
	_SystemRoleLowerName[92:96]:   SystemRoleMotd,
	_SystemRoleName[96:106]:       SystemRoleNetworking,
	_SystemRoleLowerName[96:106]:  SystemRoleNetworking,
	_SystemRoleName[106:109]:      SystemRoleNix,
	_SystemRoleLowerName[106:109]: SystemRoleNix,
	_SystemRoleName[109:116]:      SystemRoleOpenSsh,
	_SystemRoleLowerName[109:116]: SystemRoleOpenSsh,
	_SystemRoleName[116:121]:      SystemRoleShell,
	_SystemRoleLowerName[116:121]: SystemRoleShell,
	_SystemRoleName[121:125]:      SystemRoleSudo,
	_SystemRoleLowerName[121:125]: SystemRoleSudo,
	_SystemRoleName[125:129]:      SystemRoleTime,
	_SystemRoleLowerName[125:129]: SystemRoleTime,
	_SystemRoleName[129:136]:      SystemRoleUdisks2,
	_SystemRoleLowerName[129:136]: SystemRoleUdisks2,
	_SystemRoleName[136:140]:      SystemRoleUser,
	_SystemRoleLowerName[136:140]: SystemRoleUser,
	_SystemRoleName[140:146]:      SystemRoleWinGet,
	_SystemRoleLowerName[140:146]: SystemRoleWinGet,
	_SystemRoleName[146:149]:      SystemRoleWsl,
	_SystemRoleLowerName[146:149]: SystemRoleWsl,
	_SystemRoleName[149:156]:      SystemRoleXServer,
	_SystemRoleLowerName[149:156]: SystemRoleXServer,
	_SystemRoleName[156:160]:      SystemRoleXrdp,
	_SystemRoleLowerName[156:160]: SystemRoleXrdp,
}

var _SystemRoleNames = []string{
	_SystemRoleName[0:9],
	_SystemRoleName[9:13],
	_SystemRoleName[13:23],
	_SystemRoleName[23:30],
	_SystemRoleName[30:36],
	_SystemRoleName[36:42],
	_SystemRoleName[42:49],
	_SystemRoleName[49:61],
	_SystemRoleName[61:69],
	_SystemRoleName[69:73],
	_SystemRoleName[73:76],
	_SystemRoleName[76:82],
	_SystemRoleName[82:92],
	_SystemRoleName[92:96],
	_SystemRoleName[96:106],
	_SystemRoleName[106:109],
	_SystemRoleName[109:116],
	_SystemRoleName[116:121],
	_SystemRoleName[121:125],
	_SystemRoleName[125:129],
	_SystemRoleName[129:136],
	_SystemRoleName[136:140],
	_SystemRoleName[140:146],
	_SystemRoleName[146:149],
	_SystemRoleName[149:156],
	_SystemRoleName[156:160],
}

// SystemRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SystemRoleString(s string) (SystemRole, error) {
	if val, ok := _SystemRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SystemRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SystemRole values", s)
}

// SystemRoleValues returns all values of the enum
func SystemRoleValues() []SystemRole {
	return _SystemRoleValues
}

// SystemRoleStrings returns a slice of all String values of the enum
func SystemRoleStrings() []string {
	strs := make([]string, len(_SystemRoleNames))
	copy(strs, _SystemRoleNames)
	return strs
}

// IsASystemRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SystemRole) IsASystemRole() bool {
	for _, v := range _SystemRoleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SystemRole
func (i SystemRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SystemRole
func (i *SystemRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SystemRole should be a string, got %s", data)
	}

	var err error
	*i, err = SystemRoleString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SystemRole
func (i SystemRole) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SystemRole
func (i *SystemRole) UnmarshalText(text []byte) error {
	var err error
	*i, err = SystemRoleString(string(text))
	return err
}
