// Code generated by "enumer -type SystemRole -trimprefix SystemRole -linecomment -json -text -transform lower"; DO NOT EDIT.

package role

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SystemRoleName = "bootstrapbootcockpitdockergarudahome-managerhyprlandi18nkdekernelmonitoringmotdnetworkingnixopensshpulseaudioshellsudotimeudisks2userwslxserverxrdp"

var _SystemRoleIndex = [...]uint8{0, 9, 13, 20, 26, 32, 44, 52, 56, 59, 65, 75, 79, 89, 92, 99, 109, 114, 118, 122, 129, 133, 136, 143, 147}

const _SystemRoleLowerName = "bootstrapbootcockpitdockergarudahome-managerhyprlandi18nkdekernelmonitoringmotdnetworkingnixopensshpulseaudioshellsudotimeudisks2userwslxserverxrdp"

func (i SystemRole) String() string {
	if i >= SystemRole(len(_SystemRoleIndex)-1) {
		return fmt.Sprintf("SystemRole(%d)", i)
	}
	return _SystemRoleName[_SystemRoleIndex[i]:_SystemRoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SystemRoleNoOp() {
	var x [1]struct{}
	_ = x[SystemRoleBootstrap-(0)]
	_ = x[SystemRoleBoot-(1)]
	_ = x[SystemRoleCockpit-(2)]
	_ = x[SystemRoleDocker-(3)]
	_ = x[SystemRoleGaruda-(4)]
	_ = x[SystemRoleHomeManager-(5)]
	_ = x[SystemRoleHyprland-(6)]
	_ = x[SystemRoleI18N-(7)]
	_ = x[SystemRoleKDE-(8)]
	_ = x[SystemRoleKernel-(9)]
	_ = x[SystemRoleMonitoring-(10)]
	_ = x[SystemRoleMotd-(11)]
	_ = x[SystemRoleNetworking-(12)]
	_ = x[SystemRoleNix-(13)]
	_ = x[SystemRoleOpenSsh-(14)]
	_ = x[SystemRolePulseAudio-(15)]
	_ = x[SystemRoleShell-(16)]
	_ = x[SystemRoleSudo-(17)]
	_ = x[SystemRoleTime-(18)]
	_ = x[SystemRoleUdisks2-(19)]
	_ = x[SystemRoleUser-(20)]
	_ = x[SystemRoleWsl-(21)]
	_ = x[SystemRoleXServer-(22)]
	_ = x[SystemRoleXrdp-(23)]
}

var _SystemRoleValues = []SystemRole{SystemRoleBootstrap, SystemRoleBoot, SystemRoleCockpit, SystemRoleDocker, SystemRoleGaruda, SystemRoleHomeManager, SystemRoleHyprland, SystemRoleI18N, SystemRoleKDE, SystemRoleKernel, SystemRoleMonitoring, SystemRoleMotd, SystemRoleNetworking, SystemRoleNix, SystemRoleOpenSsh, SystemRolePulseAudio, SystemRoleShell, SystemRoleSudo, SystemRoleTime, SystemRoleUdisks2, SystemRoleUser, SystemRoleWsl, SystemRoleXServer, SystemRoleXrdp}

var _SystemRoleNameToValueMap = map[string]SystemRole{
	_SystemRoleName[0:9]:          SystemRoleBootstrap,
	_SystemRoleLowerName[0:9]:     SystemRoleBootstrap,
	_SystemRoleName[9:13]:         SystemRoleBoot,
	_SystemRoleLowerName[9:13]:    SystemRoleBoot,
	_SystemRoleName[13:20]:        SystemRoleCockpit,
	_SystemRoleLowerName[13:20]:   SystemRoleCockpit,
	_SystemRoleName[20:26]:        SystemRoleDocker,
	_SystemRoleLowerName[20:26]:   SystemRoleDocker,
	_SystemRoleName[26:32]:        SystemRoleGaruda,
	_SystemRoleLowerName[26:32]:   SystemRoleGaruda,
	_SystemRoleName[32:44]:        SystemRoleHomeManager,
	_SystemRoleLowerName[32:44]:   SystemRoleHomeManager,
	_SystemRoleName[44:52]:        SystemRoleHyprland,
	_SystemRoleLowerName[44:52]:   SystemRoleHyprland,
	_SystemRoleName[52:56]:        SystemRoleI18N,
	_SystemRoleLowerName[52:56]:   SystemRoleI18N,
	_SystemRoleName[56:59]:        SystemRoleKDE,
	_SystemRoleLowerName[56:59]:   SystemRoleKDE,
	_SystemRoleName[59:65]:        SystemRoleKernel,
	_SystemRoleLowerName[59:65]:   SystemRoleKernel,
	_SystemRoleName[65:75]:        SystemRoleMonitoring,
	_SystemRoleLowerName[65:75]:   SystemRoleMonitoring,
	_SystemRoleName[75:79]:        SystemRoleMotd,
	_SystemRoleLowerName[75:79]:   SystemRoleMotd,
	_SystemRoleName[79:89]:        SystemRoleNetworking,
	_SystemRoleLowerName[79:89]:   SystemRoleNetworking,
	_SystemRoleName[89:92]:        SystemRoleNix,
	_SystemRoleLowerName[89:92]:   SystemRoleNix,
	_SystemRoleName[92:99]:        SystemRoleOpenSsh,
	_SystemRoleLowerName[92:99]:   SystemRoleOpenSsh,
	_SystemRoleName[99:109]:       SystemRolePulseAudio,
	_SystemRoleLowerName[99:109]:  SystemRolePulseAudio,
	_SystemRoleName[109:114]:      SystemRoleShell,
	_SystemRoleLowerName[109:114]: SystemRoleShell,
	_SystemRoleName[114:118]:      SystemRoleSudo,
	_SystemRoleLowerName[114:118]: SystemRoleSudo,
	_SystemRoleName[118:122]:      SystemRoleTime,
	_SystemRoleLowerName[118:122]: SystemRoleTime,
	_SystemRoleName[122:129]:      SystemRoleUdisks2,
	_SystemRoleLowerName[122:129]: SystemRoleUdisks2,
	_SystemRoleName[129:133]:      SystemRoleUser,
	_SystemRoleLowerName[129:133]: SystemRoleUser,
	_SystemRoleName[133:136]:      SystemRoleWsl,
	_SystemRoleLowerName[133:136]: SystemRoleWsl,
	_SystemRoleName[136:143]:      SystemRoleXServer,
	_SystemRoleLowerName[136:143]: SystemRoleXServer,
	_SystemRoleName[143:147]:      SystemRoleXrdp,
	_SystemRoleLowerName[143:147]: SystemRoleXrdp,
}

var _SystemRoleNames = []string{
	_SystemRoleName[0:9],
	_SystemRoleName[9:13],
	_SystemRoleName[13:20],
	_SystemRoleName[20:26],
	_SystemRoleName[26:32],
	_SystemRoleName[32:44],
	_SystemRoleName[44:52],
	_SystemRoleName[52:56],
	_SystemRoleName[56:59],
	_SystemRoleName[59:65],
	_SystemRoleName[65:75],
	_SystemRoleName[75:79],
	_SystemRoleName[79:89],
	_SystemRoleName[89:92],
	_SystemRoleName[92:99],
	_SystemRoleName[99:109],
	_SystemRoleName[109:114],
	_SystemRoleName[114:118],
	_SystemRoleName[118:122],
	_SystemRoleName[122:129],
	_SystemRoleName[129:133],
	_SystemRoleName[133:136],
	_SystemRoleName[136:143],
	_SystemRoleName[143:147],
}

// SystemRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SystemRoleString(s string) (SystemRole, error) {
	if val, ok := _SystemRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SystemRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SystemRole values", s)
}

// SystemRoleValues returns all values of the enum
func SystemRoleValues() []SystemRole {
	return _SystemRoleValues
}

// SystemRoleStrings returns a slice of all String values of the enum
func SystemRoleStrings() []string {
	strs := make([]string, len(_SystemRoleNames))
	copy(strs, _SystemRoleNames)
	return strs
}

// IsASystemRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SystemRole) IsASystemRole() bool {
	for _, v := range _SystemRoleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SystemRole
func (i SystemRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SystemRole
func (i *SystemRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SystemRole should be a string, got %s", data)
	}

	var err error
	*i, err = SystemRoleString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SystemRole
func (i SystemRole) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SystemRole
func (i *SystemRole) UnmarshalText(text []byte) error {
	var err error
	*i, err = SystemRoleString(string(text))
	return err
}
