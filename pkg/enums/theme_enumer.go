// Code generated by "enumer -type Theme -trimprefix Theme -linecomment -json -text -transform kebab"; DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ThemeName = "chalkgrayscalematrixmochaoceanone-darktomorrowtwilight"

var _ThemeIndex = [...]uint8{0, 5, 14, 20, 25, 30, 38, 46, 54}

const _ThemeLowerName = "chalkgrayscalematrixmochaoceanone-darktomorrowtwilight"

func (i Theme) String() string {
	if i >= Theme(len(_ThemeIndex)-1) {
		return fmt.Sprintf("Theme(%d)", i)
	}
	return _ThemeName[_ThemeIndex[i]:_ThemeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ThemeNoOp() {
	var x [1]struct{}
	_ = x[ThemeChalk-(0)]
	_ = x[ThemeGrayscale-(1)]
	_ = x[ThemeMatrix-(2)]
	_ = x[ThemeMocha-(3)]
	_ = x[ThemeOcean-(4)]
	_ = x[ThemeOneDark-(5)]
	_ = x[ThemeTomorrow-(6)]
	_ = x[ThemeTwilight-(7)]
}

var _ThemeValues = []Theme{ThemeChalk, ThemeGrayscale, ThemeMatrix, ThemeMocha, ThemeOcean, ThemeOneDark, ThemeTomorrow, ThemeTwilight}

var _ThemeNameToValueMap = map[string]Theme{
	_ThemeName[0:5]:        ThemeChalk,
	_ThemeLowerName[0:5]:   ThemeChalk,
	_ThemeName[5:14]:       ThemeGrayscale,
	_ThemeLowerName[5:14]:  ThemeGrayscale,
	_ThemeName[14:20]:      ThemeMatrix,
	_ThemeLowerName[14:20]: ThemeMatrix,
	_ThemeName[20:25]:      ThemeMocha,
	_ThemeLowerName[20:25]: ThemeMocha,
	_ThemeName[25:30]:      ThemeOcean,
	_ThemeLowerName[25:30]: ThemeOcean,
	_ThemeName[30:38]:      ThemeOneDark,
	_ThemeLowerName[30:38]: ThemeOneDark,
	_ThemeName[38:46]:      ThemeTomorrow,
	_ThemeLowerName[38:46]: ThemeTomorrow,
	_ThemeName[46:54]:      ThemeTwilight,
	_ThemeLowerName[46:54]: ThemeTwilight,
}

var _ThemeNames = []string{
	_ThemeName[0:5],
	_ThemeName[5:14],
	_ThemeName[14:20],
	_ThemeName[20:25],
	_ThemeName[25:30],
	_ThemeName[30:38],
	_ThemeName[38:46],
	_ThemeName[46:54],
}

// ThemeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ThemeString(s string) (Theme, error) {
	if val, ok := _ThemeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ThemeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Theme values", s)
}

// ThemeValues returns all values of the enum
func ThemeValues() []Theme {
	return _ThemeValues
}

// ThemeStrings returns a slice of all String values of the enum
func ThemeStrings() []string {
	strs := make([]string, len(_ThemeNames))
	copy(strs, _ThemeNames)
	return strs
}

// IsATheme returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Theme) IsATheme() bool {
	for _, v := range _ThemeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Theme
func (i Theme) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Theme
func (i *Theme) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Theme should be a string, got %s", data)
	}

	var err error
	*i, err = ThemeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Theme
func (i Theme) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Theme
func (i *Theme) UnmarshalText(text []byte) error {
	var err error
	*i, err = ThemeString(string(text))
	return err
}
