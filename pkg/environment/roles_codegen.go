//go:build ignore

package main

import (
	"fmt"
	"os"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
	"github.com/samber/lo"

	"github.com/hanselrd/dotfiles/pkg/role"
)

func main() {
	goPackage := os.Getenv("GOPACKAGE")

	f := NewFile(goPackage)

	f.PackageComment("Code generated by \"generator\"; DO NOT EDIT.")

	f.Type().Id("environmentRoles").Struct(
		Id("System").Op("*").
			Id("environmentRolesSystem").
			Tag(map[string]string{"json": "system,omitempty"}),
		Id("User").Op("*").
			Id("environmentRolesUser").
			Tag(map[string]string{"json": "user,omitempty"}),
	)

	f.Type().Id("environmentRolesSystem").StructFunc(func(g *Group) {
		for _, systemRole := range role.SystemRoleValues() {
			g.Id(lo.PascalCase(systemRole.String())).
				Op("*").
				Id(fmt.Sprintf("environmentRolesSystem%s", lo.PascalCase(systemRole.String()))).
				Tag(map[string]string{"json": fmt.Sprintf("%s,omitempty", systemRole)})
		}
	})

	f.Type().Id("environmentRolesUser").StructFunc(func(g *Group) {
		for _, userRole := range role.UserRoleValues() {
			g.Id(lo.PascalCase(userRole.String())).
				Op("*").
				Id(fmt.Sprintf("environmentRolesUser%s", lo.PascalCase(userRole.String()))).
				Tag(map[string]string{"json": fmt.Sprintf("%s,omitempty", userRole)})
		}
	})

	goFile := os.Getenv("GOFILE")
	ext := filepath.Ext(goFile)
	baseFilename := goFile[0 : len(goFile)-len(ext)]
	targetFilename := baseFilename + "_gen.go"

	f.Save(targetFilename)
}
