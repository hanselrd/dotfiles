//go:build ignore

package main

import (
	"fmt"
	"os"
	"path/filepath"

	. "github.com/dave/jennifer/jen"

	"github.com/hanselrd/dotfiles/internal/privilegelevel"
	"github.com/hanselrd/dotfiles/pkg/role"
)

func main() {
	goPackage := os.Getenv("GOPACKAGE")

	f := NewFile(goPackage)

	f.PackageComment("Code generated by \"generator\"; DO NOT EDIT.")

	f.Type().Id("environmentRoles").StructFunc(func(g *Group) {
		for _, pl := range privilegelevel.PrivilegeLevelValues() {
			g.Id(pl.String()).
				Op("*").
				Id(fmt.Sprintf("environmentRoles%s", pl)).
				Tag(map[string]string{"json": fmt.Sprintf("%s,omitempty", pl.NixString())})
		}
	})

	for _, pl := range privilegelevel.PrivilegeLevelValues() {
		f.Type().Id(fmt.Sprintf("environmentRoles%s", pl)).StructFunc(func(g *Group) {
			for _, r := range role.RolePrivilegeLevelFuncMap.Values(pl) {
				g.Id(r.String()).
					Op("*").
					Id(fmt.Sprintf("environmentRoles%s%s", pl, r)).
					Tag(map[string]string{"json": fmt.Sprintf("%s,omitempty", r.NixString())})
			}
		})
	}

	goFile := os.Getenv("GOFILE")
	ext := filepath.Ext(goFile)
	baseFilename := goFile[0 : len(goFile)-len(ext)]
	targetFilename := baseFilename + "_gen.go"

	f.Save(targetFilename)
}
