// Code generated by "privilegelevelfuncmap Profile"; DO NOT EDIT.
package profile

import (
	"reflect"

	lo "github.com/samber/lo"

	privilegelevel "github.com/hanselrd/dotfiles/internal/privilegelevel"
)

var ProfilePrivilegeLevelFuncMap = profilePrivilegeLevelFuncMap{
	privilegelevel.PrivilegeLevelSystem: {
		"String":  SystemProfileString,
		"Strings": SystemProfileStrings,
		"Values":  SystemProfileValues,
	},
	privilegelevel.PrivilegeLevelUser: {
		"String":  UserProfileString,
		"Strings": UserProfileStrings,
		"Values":  UserProfileValues,
	},
}

type profilePrivilegeLevelFuncMap map[privilegelevel.PrivilegeLevel]map[string]any

func (m profilePrivilegeLevelFuncMap) String(pl privilegelevel.PrivilegeLevel, s string) (Profile, error) {
	res := reflect.ValueOf(m[pl]["String"]).Call([]reflect.Value{reflect.ValueOf(s)})
	if err, ok := res[1].Interface().(error); ok {
		return nil, err
	}
	return res[0].Interface().(Profile), nil
}

func (m profilePrivilegeLevelFuncMap) Values(pl privilegelevel.PrivilegeLevel) []Profile {
	res := reflect.ValueOf(m[pl]["Values"]).Call([]reflect.Value{})
	return lo.RepeatBy(res[0].Len(), func(i int) Profile {
		return res[0].Index(i).Interface().(Profile)
	})
}

func (m profilePrivilegeLevelFuncMap) Strings(pl privilegelevel.PrivilegeLevel) []string {
	res := reflect.ValueOf(m[pl]["Strings"]).Call([]reflect.Value{})
	return res[0].Interface().([]string)
}
