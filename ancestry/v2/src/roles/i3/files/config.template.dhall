let External/Prelude = ../../../Lib/External/Prelude.partial.dhall

let Configuration = ../../../Lib/Configuration/Enum.partial.dhall

let Configuration/equal = ../../../codegen/Lib/Configuration/equal.partial.dhall

let Directory = ../../../Lib/Directory/Enum.partial.dhall

let Directory/toText = ../../../codegen/Lib/Directory/toText.partial.dhall

let PackageManager = ../../../Lib/PackageManager/Enum.partial.dhall

let PackageManager/equal =
      ../../../codegen/Lib/PackageManager/equal.partial.dhall

let Theme/toMetadata = ../../../Lib/Theme/toMetadata.partial.dhall

let Font/toMetadata = ../../../Lib/Font/toMetadata.partial.dhall

let env = ../../../codegen/environment.partial.dhall

let themeMetadata = Theme/toMetadata env.theme

let Theme/Color/toText =
      ../../../Lib/Theme/Color/toText.partial.dhall themeMetadata.palette

let fontMetadata = Font/toMetadata env.font

in  ''
    # This file has been auto-generated by i3-config-wizard(1).
    # It will not be overwritten, so edit it as you like.
    #
    # Should you change your keyboard layout some time, delete
    # this file and re-run i3-config-wizard(1).
    #

    # i3 config file (v4)
    #
    # Please see https://i3wm.org/docs/userguide.html for a complete reference!

    set $mod Mod4

    # Font for window titles. Will also be used by the bar unless a different font
    # is used in the bar {} block below.
    font xft:${fontMetadata.windowManager.name} ${External/Prelude.Text.default
                                                    fontMetadata.windowManager.style} ${External/Prelude.Natural.show
                                                                                          fontMetadata.windowManager.size}

    # Use Mouse+$mod to drag floating windows to their wanted position
    floating_modifier $mod

    # start a terminal
    bindsym $mod+Return exec i3-sensible-terminal

    # kill focused window
    bindsym $mod+Shift+q kill

    # start dmenu (a program launcher)
    #bindsym $mod+d exec dmenu_run

    # change focus
    bindsym $mod+j focus left
    bindsym $mod+k focus down
    bindsym $mod+l focus up
    bindsym $mod+semicolon focus right

    # alternatively, you can use the cursor keys:
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # move focused window
    bindsym $mod+Shift+j move left
    bindsym $mod+Shift+k move down
    bindsym $mod+Shift+l move up
    bindsym $mod+Shift+semicolon move right

    # alternatively, you can use the cursor keys:
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right

    # split in horizontal orientation
    bindsym $mod+h split h

    # split in vertical orientation
    bindsym $mod+v split v

    # enter fullscreen mode for the focused container
    bindsym $mod+f fullscreen toggle

    # change container layout (stacked, tabbed, toggle split)
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # toggle tiling / floating
    bindsym $mod+Shift+space floating toggle

    # change focus between tiling / floating windows
    bindsym $mod+space focus mode_toggle

    # focus the parent container
    bindsym $mod+a focus parent

    # focus the child container
    #bindsym $mod+d focus child

    # move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show

    # Define names for default workspaces for which we configure key bindings later on.
    # We use variables to avoid repeating the names in multiple places.
    set $ws1 "1"
    set $ws2 "2"
    set $ws3 "3"
    set $ws4 "4"
    set $ws5 "5"
    set $ws6 "6"
    set $ws7 "7"
    set $ws8 "8"
    set $ws9 "9"
    set $ws10 "10"

    # switch to workspace
    bindsym $mod+1 workspace number $ws1
    bindsym $mod+2 workspace number $ws2
    bindsym $mod+3 workspace number $ws3
    bindsym $mod+4 workspace number $ws4
    bindsym $mod+5 workspace number $ws5
    bindsym $mod+6 workspace number $ws6
    bindsym $mod+7 workspace number $ws7
    bindsym $mod+8 workspace number $ws8
    bindsym $mod+9 workspace number $ws9
    bindsym $mod+0 workspace number $ws10

    # move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace number $ws1
    bindsym $mod+Shift+2 move container to workspace number $ws2
    bindsym $mod+Shift+3 move container to workspace number $ws3
    bindsym $mod+Shift+4 move container to workspace number $ws4
    bindsym $mod+Shift+5 move container to workspace number $ws5
    bindsym $mod+Shift+6 move container to workspace number $ws6
    bindsym $mod+Shift+7 move container to workspace number $ws7
    bindsym $mod+Shift+8 move container to workspace number $ws8
    bindsym $mod+Shift+9 move container to workspace number $ws9
    bindsym $mod+Shift+0 move container to workspace number $ws10

    # reload the configuration file
    bindsym $mod+Shift+c reload
    # restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
    bindsym $mod+Shift+r restart
    # exit i3 (logs you out of your X session)
    #bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

    # resize window (you can also use the mouse for that)
    set $mode_resize Resize
    mode "$mode_resize" {
            # These bindings trigger as soon as you enter the resize mode

            # Pressing left will shrink the window’s width.
            # Pressing right will grow the window’s width.
            # Pressing up will shrink the window’s height.
            # Pressing down will grow the window’s height.
            bindsym j resize shrink width 10 px or 10 ppt
            bindsym k resize grow height 10 px or 10 ppt
            bindsym l resize shrink height 10 px or 10 ppt
            bindsym semicolon resize grow width 10 px or 10 ppt

            # same bindings, but for the arrow keys
            bindsym Left resize shrink width 10 px or 10 ppt
            bindsym Down resize grow height 10 px or 10 ppt
            bindsym Up resize shrink height 10 px or 10 ppt
            bindsym Right resize grow width 10 px or 10 ppt

            # back to normal: Enter or Escape or $mod+r
            bindsym Return mode "default"
            bindsym Escape mode "default"
            bindsym $mod+r mode "default"
    }
    bindsym $mod+r mode "$mode_resize"

    ${External/Prelude.Text.default
        ( if    PackageManager/equal env.package_manager PackageManager.Pacman
          then  Some
                  ''
                  # Edit gaps
                  set $mode_gaps Gaps: (o) outer, (i) inner
                  set $mode_gaps_outer Outer Gaps: ([+|-|0]) local, (Shift+[+|-|0]) global
                  set $mode_gaps_inner Inner Gaps: ([+|-|0]) local, (Shift+[+|-|0]) global
                  mode "$mode_gaps" {
                          bindsym o mode "$mode_gaps_outer"
                          bindsym i mode "$mode_gaps_inner"

                          bindsym Return mode "default"
                          bindsym Escape mode "default"
                          bindsym $mod+Shift+g mode "default"
                  }
                  mode "$mode_gaps_outer" {
                          bindsym plus gaps outer current plus 5
                          bindsym minus gaps outer current minus 5
                          bindsym 0 gaps outer current set 0

                          bindsym Shift+plus gaps outer all plus 5
                          bindsym Shift+minus gaps outer all minus 5
                          bindsym Shift+0 gaps outer all set 0

                          bindsym Return mode "default"
                          bindsym Escape mode "default"
                          bindsym $mod+Shift+g mode "default"
                  }
                  mode "$mode_gaps_inner" {
                          bindsym plus gaps inner current plus 5
                          bindsym minus gaps inner current minus 5
                          bindsym 0 gaps inner current set 0

                          bindsym Shift+plus gaps inner all plus 5
                          bindsym Shift+minus gaps inner all minus 5
                          bindsym Shift+0 gaps inner all set 0

                          bindsym Return mode "default"
                          bindsym Escape mode "default"
                          bindsym $mod+Shift+g mode "default"
                  }
                  bindsym $mod+Shift+g mode "$mode_gaps"
                  ''
          else  None Text
        )}

    # set_from_resource $background i3wm.background #F0F0F0
    # set_from_resource $foreground i3wm.foreground #F0F0F0
    # set_from_resource $color0     i3wm.color0     #F0F0F0
    # set_from_resource $color1     i3wm.color1     #F0F0F0
    # set_from_resource $color2     i3wm.color2     #F0F0F0
    # set_from_resource $color3     i3wm.color3     #F0F0F0
    # set_from_resource $color4     i3wm.color4     #F0F0F0
    # set_from_resource $color5     i3wm.color5     #F0F0F0
    # set_from_resource $color6     i3wm.color6     #F0F0F0
    # set_from_resource $color7     i3wm.color7     #F0F0F0
    # set_from_resource $color8     i3wm.color8     #F0F0F0
    # set_from_resource $color9     i3wm.color9     #F0F0F0
    # set_from_resource $color10    i3wm.color10    #F0F0F0
    # set_from_resource $color11    i3wm.color11    #F0F0F0
    # set_from_resource $color12    i3wm.color12    #F0F0F0
    # set_from_resource $color13    i3wm.color13    #F0F0F0
    # set_from_resource $color14    i3wm.color14    #F0F0F0
    # set_from_resource $color15    i3wm.color15    #F0F0F0

    # class                 border  bground text    indicator child_border
    client.focused          ${Theme/Color/toText
                                themeMetadata.windowManager.clientFocused.border} ${Theme/Color/toText
                                                                                      themeMetadata.windowManager.clientFocused.border} ${Theme/Color/toText
                                                                                                                                            themeMetadata.windowManager.clientFocused.text} ${Theme/Color/toText
                                                                                                                                                                                                themeMetadata.windowManager.clientFocused.indicator}   ${Theme/Color/toText
                                                                                                                                                                                                                                                           themeMetadata.windowManager.clientFocused.border}
    client.focused_inactive ${Theme/Color/toText
                                themeMetadata.windowManager.clientFocusedInactive.border} ${Theme/Color/toText
                                                                                              themeMetadata.windowManager.clientFocusedInactive.border} ${Theme/Color/toText
                                                                                                                                                            themeMetadata.windowManager.clientFocusedInactive.text} ${Theme/Color/toText
                                                                                                                                                                                                                        themeMetadata.windowManager.clientFocusedInactive.indicator}   ${Theme/Color/toText
                                                                                                                                                                                                                                                                                           themeMetadata.windowManager.clientFocusedInactive.border}
    client.unfocused        ${Theme/Color/toText
                                themeMetadata.windowManager.clientUnfocused.border} ${Theme/Color/toText
                                                                                        themeMetadata.windowManager.clientUnfocused.border} ${Theme/Color/toText
                                                                                                                                                themeMetadata.windowManager.clientUnfocused.text} ${Theme/Color/toText
                                                                                                                                                                                                      themeMetadata.windowManager.clientUnfocused.indicator}   ${Theme/Color/toText
                                                                                                                                                                                                                                                                   themeMetadata.windowManager.clientUnfocused.border}
    client.urgent           ${Theme/Color/toText
                                themeMetadata.windowManager.clientUrgent.border} ${Theme/Color/toText
                                                                                     themeMetadata.windowManager.clientUrgent.border} ${Theme/Color/toText
                                                                                                                                          themeMetadata.windowManager.clientUrgent.text} ${Theme/Color/toText
                                                                                                                                                                                             themeMetadata.windowManager.clientUrgent.indicator}   ${Theme/Color/toText
                                                                                                                                                                                                                                                       themeMetadata.windowManager.clientUrgent.border}
    client.placeholder      ${Theme/Color/toText
                                themeMetadata.windowManager.clientPlaceholder.border} ${Theme/Color/toText
                                                                                          themeMetadata.windowManager.clientPlaceholder.border} ${Theme/Color/toText
                                                                                                                                                    themeMetadata.windowManager.clientPlaceholder.text} ${Theme/Color/toText
                                                                                                                                                                                                            themeMetadata.windowManager.clientPlaceholder.indicator}   ${Theme/Color/toText
                                                                                                                                                                                                                                                                           themeMetadata.windowManager.clientPlaceholder.border}

    client.background       ${Theme/Color/toText
                                themeMetadata.windowManager.clientBackground}

    # Start i3bar to display a workspace bar (plus the system information i3status
    # finds out, if available)
    # bar {
    #         status_command i3status
    # }
    bar {
            colors {
                    background ${Theme/Color/toText
                                   themeMetadata.statusBar.background}
                    statusline ${Theme/Color/toText
                                   themeMetadata.statusBar.foreground}
                    separator  ${Theme/Color/toText
                                   themeMetadata.statusBar.separator}

    #               class              border  bground text
                    focused_workspace  ${Theme/Color/toText
                                           themeMetadata.statusBar.focusedWorkspace.border} ${Theme/Color/toText
                                                                                                themeMetadata.statusBar.focusedWorkspace.border} ${Theme/Color/toText
                                                                                                                                                     themeMetadata.statusBar.focusedWorkspace.text}
                    active_workspace   ${Theme/Color/toText
                                           themeMetadata.statusBar.activeWorkspace.border} ${Theme/Color/toText
                                                                                               themeMetadata.statusBar.activeWorkspace.border} ${Theme/Color/toText
                                                                                                                                                   themeMetadata.statusBar.activeWorkspace.text}
                    inactive_workspace ${Theme/Color/toText
                                           themeMetadata.statusBar.inactiveWorkspace.border} ${Theme/Color/toText
                                                                                                 themeMetadata.statusBar.inactiveWorkspace.border} ${Theme/Color/toText
                                                                                                                                                       themeMetadata.statusBar.inactiveWorkspace.text}
                    urgent_workspace   ${Theme/Color/toText
                                           themeMetadata.statusBar.urgentWorkspace.border} ${Theme/Color/toText
                                                                                               themeMetadata.statusBar.urgentWorkspace.border} ${Theme/Color/toText
                                                                                                                                                   themeMetadata.statusBar.urgentWorkspace.text}
                    binding_mode       ${Theme/Color/toText
                                           themeMetadata.statusBar.bindingMode.border} ${Theme/Color/toText
                                                                                           themeMetadata.statusBar.bindingMode.border} ${Theme/Color/toText
                                                                                                                                           themeMetadata.statusBar.bindingMode.text}
            }
    ${External/Prelude.Text.default
        ( if    Configuration/equal env.configuration Configuration.Desktop
          then  Some
                  ''
                          output primary
                  ''
          else  None Text
        )}
            tray_padding 4
            status_command i3status-rs ${Directory/toText
                                           Directory.I3status}/config.toml
            position top
    }

    ${External/Prelude.Text.default
        ( if    Configuration/equal env.configuration Configuration.Desktop
          then  Some
                  ''
                  bar {
                          colors {
                                  background ${Theme/Color/toText
                                                 themeMetadata.statusBar.background}
                                  statusline ${Theme/Color/toText
                                                 themeMetadata.statusBar.foreground}
                                  separator  ${Theme/Color/toText
                                                 themeMetadata.statusBar.separator}

                  #               class              border  bground text
                                  focused_workspace  ${Theme/Color/toText
                                                         themeMetadata.statusBar.focusedWorkspace.border} ${Theme/Color/toText
                                                                                                              themeMetadata.statusBar.focusedWorkspace.border} ${Theme/Color/toText
                                                                                                                                                                   themeMetadata.statusBar.focusedWorkspace.text}
                                  active_workspace   ${Theme/Color/toText
                                                         themeMetadata.statusBar.activeWorkspace.border} ${Theme/Color/toText
                                                                                                             themeMetadata.statusBar.activeWorkspace.border} ${Theme/Color/toText
                                                                                                                                                                 themeMetadata.statusBar.activeWorkspace.text}
                                  inactive_workspace ${Theme/Color/toText
                                                         themeMetadata.statusBar.inactiveWorkspace.border} ${Theme/Color/toText
                                                                                                               themeMetadata.statusBar.inactiveWorkspace.border} ${Theme/Color/toText
                                                                                                                                                                     themeMetadata.statusBar.inactiveWorkspace.text}
                                  urgent_workspace   ${Theme/Color/toText
                                                         themeMetadata.statusBar.urgentWorkspace.border} ${Theme/Color/toText
                                                                                                             themeMetadata.statusBar.urgentWorkspace.border} ${Theme/Color/toText
                                                                                                                                                                 themeMetadata.statusBar.urgentWorkspace.text}
                                  binding_mode       ${Theme/Color/toText
                                                         themeMetadata.statusBar.bindingMode.border} ${Theme/Color/toText
                                                                                                         themeMetadata.statusBar.bindingMode.border} ${Theme/Color/toText
                                                                                                                                                         themeMetadata.statusBar.bindingMode.text}
                          }
                          output nonprimary
                          tray_output none
                          status_command i3status-rs ${Directory/toText
                                                         Directory.I3status}/config-sm.toml
                          position top
                  }
                  ''
          else  None Text
        )}

    # Disable window titles
    for_window [class=".*"] border pixel 3

    ${External/Prelude.Text.default
        ( if    PackageManager/equal env.package_manager PackageManager.Pacman
          then  Some
                  ''
                  # smart_borders on

                  # Gaps
                  gaps outer 10
                  gaps inner 10
                  ''
          else  None Text
        )}
    ''
