---
# sudo ansible-playbook --diff -i inventory --limit laptop --tags all playbook.yml --extra-vars "user_id=delacruz user_email=test@test.com user_name='Test Test' user_home_dir=/tmp/dotfiles/home user_cache_dir=/tmp/dotfiles/cache user_config_dir=/tmp/dotfiles/config user_root_dir=/tmp/dotfiles/root user_temp_dir=/tmp/dotfiles/temp"

- hosts: all
  gather_facts: yes
  become: yes

  tasks:
    - name: Check if variables are defined
      fail:
        msg: "{{ item }} must be defined (missing --extra-vars \"{{ item }}={{ item | upper }}\"?)"
      when: vars[item] is not defined
      loop:
        - user_email
        - user_id
        - user_name
      tags: always

    - &anchor1
      name: Register derived user variables
      set_fact:
        user_home_dir: "/home/{{ user_id }}"
      tags: always
    - <<: *anchor1
      set_fact:
        user_cache_dir: "{{ user_home_dir }}/.cache"
        user_config_dir: "{{ user_home_dir }}/.config"
        user_root_dir: "/"
        user_temp_dir: "/tmp"

    - name: Create user directories
      become: yes
      become_user: "{{ user_id }}"
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ user_cache_dir }}"
        - "{{ user_config_dir }}"
        - "{{ user_home_dir }}"
        - "{{ user_root_dir }}"
        - "{{ user_temp_dir }}"
      tags: always

    - name: Register derived tag variables
      set_fact:
        "tag_{{ item }}": "{{ (('all' in ansible_run_tags or item in ansible_run_tags) and item not in ansible_skip_tags) | bool }}"
      loop:
        - backgrounds
        - bin
        - ccache
        - chsh
        - elm
        - fonts
        - git
        - gtk
        - haskell
        - i3
        - i3status
        - nodejs
        - packages
        - picom
        - python
        - ranger
        - rofi
        - rust
        - ssh
        - sxhkd
        - systemd
        - theme
        - tmux
        - urxvt
        - vim
        - xinit
        - xrdb
        - zsh
      tags: always

    # - name: Check tags
    #   fail:
    #     # msg: "Failed with check={{ item.check }}, tags={{ item.tags }}"
    #     # msg: "{{ item.tags | map('regex_replace', '^', 'tag_') | list }}"
    #     msg: "{{ item.check }} {{ item.tags }}"
    #   when: true
    #   # when: ((item.check == "equal_one") and
    # #         (("all" in ansible_run_tags and ansible_skip_tags | intersect(item.tags) | length < item.tags | length - 1) or
    # #         (ansible_run_tags | intersect(item.tags) | length > 1))) or
    # #         ((item.check == "all_or_none") and
    # #         (("all" in ansible_run_tags and ansible_skip_tags | intersect(item.tags) | length != item.tags | length and ansible_skip_tags | intersect(item.tags) | length != 0) or
    # #         (ansible_run_tags | intersect(item.tags) | length != item.tags | length and ansible_run_tags | intersect(item.tags) | length != 0)))
    #   loop:
    #     # - { check: all_or_none, tags: [i3, i3status] }
    #     # - { check: equal_one, tags: [xinit] }
    #     - { check: equal_one, tags: [i3, dwm, bspwm] }
    #   vars:
    #     checks:
    #       - { type: 'equal_one', tags: [i3, dwm, bspwm] }
    #   tags: always

    - debug:
        msg: "Running with: run_tags={{ ansible_run_tags }}, skip_tags={{ ansible_skip_tags }}"
      tags: always

    # - meta: end_play

    - include_role:
        name: packages
        apply:
          tags: packages
      tags: always

    - include_role:
        name: theme
        apply:
          tags: theme
      tags: always

    - include_role:
        name: backgrounds
        apply:
          tags: backgrounds
      tags: always

    - include_role:
        name: fonts
        apply:
          tags: fonts
      tags: always

    - include_role:
        name: bin
        apply:
          tags: bin
      tags: always

    - include_role:
        name: systemd
        apply:
          tags: systemd
      tags: always

    - include_role:
        name: xinit
        apply:
          tags: xinit
      tags: always

    - include_role:
        name: urxvt
        apply:
          tags: urxvt
      tags: always

    - include_role:
        name: xrdb
        apply:
          tags: xrdb
      tags: always

    - include_role:
        name: rofi
        apply:
          tags: rofi
      tags: always

    - include_role:
        name: sxhkd
        apply:
          tags: sxhkd
      tags: always

    - include_role:
        name: i3
        apply:
          tags: i3
      tags: always

    - include_role:
        name: i3status
        apply:
          tags: i3status
      tags: always

    - include_role:
        name: gtk
        apply:
          tags: gtk
      tags: always

    - include_role:
        name: git
        apply:
          tags: git
      tags: always

    - include_role:
        name: vim
        apply:
          tags: vim
      tags: always

    - include_role:
        name: tmux
        apply:
          tags: tmux
      tags: always

    - include_role:
        name: chsh
        apply:
          tags: chsh
      tags: always

    - include_role:
        name: zsh
        apply:
          tags: zsh
      tags: always

    - include_role:
        name: ssh
        apply:
          tags: ssh
      tags: always

    - include_role:
        name: ccache
        apply:
          tags: ccache
      tags: always

    - include_role:
        name: picom
        apply:
          tags: picom
      tags: always

    - include_role:
        name: ranger
        apply:
          tags: ranger
      tags: always

    - include_role:
        name: nodejs
        apply:
          tags: nodejs
      tags: always

    - include_role:
        name: elm
        apply:
          tags: elm
      tags: always

    - include_role:
        name: rust
        apply:
          tags: rust
      tags: always

    - include_role:
        name: python
        apply:
          tags: python
      tags: always

    - include_role:
        name: haskell
        apply:
          tags: haskell
      tags: always
