//go:build ignore

package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	. "github.com/dave/jennifer/jen"

	"github.com/hanselrd/dotfiles/lib/enums"
	"github.com/hanselrd/dotfiles/lib/utils"
)

func main() {
	goPackage := os.Getenv("GOPACKAGE")

	f := NewFile(goPackage)

	f.PackageComment("Code generated by generator; DO NOT EDIT.")

	f.Var().DefsFunc(func(g *Group) {
		for _, userProfile := range enums.UserProfiles() {
			g.Id(fmt.Sprintf("%s%s", os.Args[2], strings.ReplaceAll(utils.Caser.Title.String(userProfile.String()), "-", ""))).
				Op("=").
				Op("*").
				Qual("github.com/hanselrd/dotfiles/lib/structs", "NewProfile").
				Call(
					Qual(
						"github.com/hanselrd/dotfiles/lib/enums",
						fmt.Sprintf("SystemProfile%s", os.Args[2]),
					),
					Qual(
						"github.com/hanselrd/dotfiles/lib/enums",
						fmt.Sprintf(
							"UserProfile%s",
							strings.ReplaceAll(utils.Caser.Title.String(userProfile.String()), "-", ""),
						),
					),
				)
		}

	})

	f.Var().Id(fmt.Sprintf("%sProfiles", os.Args[1])).
		Op("=").
		Index().
		Qual("github.com/hanselrd/dotfiles/lib/structs", "Profile").ValuesFunc(func(g *Group) {
		for _, userProfile := range enums.UserProfiles() {
			g.Id(
				fmt.Sprintf(
					"%s%s",
					os.Args[2],
					strings.ReplaceAll(utils.Caser.Title.String(userProfile.String()), "-", ""),
				),
			)
		}
	})

	goFile := os.Getenv("GOFILE")
	ext := filepath.Ext(goFile)
	baseFilename := goFile[0 : len(goFile)-len(ext)]
	targetFilename := baseFilename + "_gen.go"

	f.Save(targetFilename)
}
