//go:build ignore

package main

import (
	"fmt"
	"os"
	"path/filepath"

	. "github.com/dave/jennifer/jen"

	"github.com/iancoleman/strcase"

	"github.com/hanselrd/dotfiles/lib/enums"
)

func main() {
	goPackage := os.Getenv("GOPACKAGE")

	f := NewFile(goPackage)

	f.PackageComment("Code generated by \"generator\"; DO NOT EDIT.")

	f.Var().DefsFunc(func(g *Group) {
		for _, systemProfile := range enums.SystemProfileValues() {
			for _, userProfile := range enums.UserProfileValues() {
				g.Id(fmt.Sprintf("%s%s", strcase.ToCamel(systemProfile.String()), strcase.ToCamel(userProfile.String()))).
					Op("=").
					Op("*").
					Qual("github.com/hanselrd/dotfiles/lib/structs", "NewProfile").
					Call(
						Qual(
							"github.com/hanselrd/dotfiles/lib/enums",
							fmt.Sprintf("SystemProfile%s", strcase.ToCamel(systemProfile.String())),
						),
						Qual(
							"github.com/hanselrd/dotfiles/lib/enums",
							fmt.Sprintf(
								"UserProfile%s",
								strcase.ToCamel(userProfile.String()),
							),
						),
					)
			}
		}
	})

	f.Var().DefsFunc(func(g *Group) {
		for _, systemProfile := range enums.SystemProfileValues() {
			g.Id(fmt.Sprintf("%sProfiles", strcase.ToCamel(systemProfile.String()))).
				Op("=").
				Index().
				Qual("github.com/hanselrd/dotfiles/lib/structs", "Profile").
				ValuesFunc(func(gg *Group) {
					for _, userProfile := range enums.UserProfileValues() {
						gg.Id(
							fmt.Sprintf(
								"%s%s",
								strcase.ToCamel(systemProfile.String()),
								strcase.ToCamel(userProfile.String()),
							),
						)
					}
				})
		}
		g.Id("HomeManagerProfiles").Op("=").Qual("slices", "Concat").CallFunc(func(gg *Group) {
			for _, systemProfile := range enums.SystemProfileValues() {
				gg.Id(fmt.Sprintf("%sProfiles", strcase.ToCamel(systemProfile.String())))
			}
		})
	})

	goFile := os.Getenv("GOFILE")
	ext := filepath.Ext(goFile)
	baseFilename := goFile[0 : len(goFile)-len(ext)]
	targetFilename := baseFilename + "_gen.go"

	f.Save(targetFilename)
}
