//go:build ignore

package main

import (
	"fmt"
	"os"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
)

func main() {
	goPackage := os.Getenv("GOPACKAGE")

	f := NewFile(goPackage)

	f.PackageComment("Code generated by generator; DO NOT EDIT.")

	f.Func().
		Id(fmt.Sprintf("%ss", os.Args[1])).
		Params().
		Params(Index().Id(os.Args[1])).
		Block(
			Id("m").Op(":=").Make(Index().Id(os.Args[1]), Len(
				Id(
					fmt.Sprintf("_%s_index", os.Args[1]),
				),
			).Op("-").Lit(1)),
			For(
				Id("i").Op(":=").Range().
					Id(
						fmt.Sprintf("_%s_index", os.Args[1]),
					).
					Index(Op(":").
						Len(
							Id(
								fmt.Sprintf("_%s_index", os.Args[1]),
							),
						).Op("-").Lit(1)),
			).Block(
				Id("m").Index(Id("i")).Op("=").Id(os.Args[1]).Call(Id("i")),
			),
			Return(Id("m")),
		)

	// f.Func().
	// 	Id(fmt.Sprintf("%sMap", os.Args[1])).
	// 	Types(Id("T").Any()).
	// 	Params(Id("f").Func().Params(Id(os.Args[1])).Params(Id("T"))).
	// 	Params(Id("m").Map(Id(os.Args[1])).Id("T")).
	// 	Block(
	// 		For(
	// 			List(Id("_"), Id("v")).Op(":=").Range().
	// 				Id(
	// 					fmt.Sprintf("%ss", os.Args[1]),
	// 				).Call(),
	// 		).Block(
	// 			Id("m").Index(Id("v")).Op("=").Id("f").Call(Id("v")),
	// 		),
	// 		Return(),
	// 	)

	f.Func().
		Params(
			Id("i").Id(os.Args[1]),
		).
		Id("MarshalText").
		Params().
		Params(
			Index().Byte(), Error()).
		Block(
			Return(Index().Byte().Parens(
				Id("i").Dot("String").Call(),
			), Nil()),
		)

	f.Func().
		Params(
			Id("i").Id(os.Args[1]),
		).
		Id("MarshalJSON").
		Params().
		Params(
			Index().Byte(), Error()).
		Block(
			Return(
				Qual("encoding/json", "Marshal").Call(
					Id("i").Dot("String").Call(),
				),
			),
		)

	goFile := os.Getenv("GOFILE")
	ext := filepath.Ext(goFile)
	baseFilename := goFile[0 : len(goFile)-len(ext)]
	targetFilename := baseFilename + "_gen.go"

	f.Save(targetFilename)
}
