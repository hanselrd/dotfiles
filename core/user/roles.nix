# Code generated by generator; DO NOT EDIT.
{
  config,
  lib,
  pkgs,
  ...
}:
with lib; {
  options = {
    roles.browser = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable browser role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 browser role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 browser role";
      # };
    };
    roles.common = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable common role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 common role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 common role";
      # };
    };
    roles.development = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable development role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 development role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 development role";
      # };
    };
    roles.docker = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable docker role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 docker role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 docker role";
      # };
    };
    roles.editor = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable editor role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 editor role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 editor role";
      # };
    };
    roles.homeage = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable homeage role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 homeage role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 homeage role";
      # };
    };
    roles.nix = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable nix role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 nix role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 nix role";
      # };
    };
    roles.other = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable other role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 other role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 other role";
      # };
    };
    roles.pager = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable pager role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 pager role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 pager role";
      # };
    };
    roles.scripts = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable scripts role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 scripts role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 scripts role";
      # };
    };
    roles.shell = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable shell role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 shell role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 shell role";
      # };
    };
    roles.terminal = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable terminal role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 terminal role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 terminal role";
      # };
    };
    roles.theme = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable theme role";
      };
      # arg0 = mkOption {
      #   type = types.int;
      #   default = 10;
      #   description = "Arg0 theme role";
      # };
      # arg1 = mkOption {
      #   type = types.float;
      #   default = 10.5;
      #   description = "Arg1 theme role";
      # };
    };
  };
  config = mkIf config.roles.browser.enable {
    # programs.xyz.enable = true;
  };
  config = mkIf config.roles.common.enable {
    # programs.xyz.enable = true;
  };
  config = mkIf config.roles.development.enable {
    # programs.xyz.enable = true;
  };
  config = mkIf config.roles.docker.enable {
    # programs.xyz.enable = true;
  };
  config = mkIf config.roles.editor.enable {
    # programs.xyz.enable = true;
  };
  config = mkIf config.roles.homeage.enable {
    # programs.xyz.enable = true;
  };
  config = mkIf config.roles.nix.enable {
    # programs.xyz.enable = true;
  };
  config = mkIf config.roles.other.enable {
    # programs.xyz.enable = true;
  };
  config = mkIf config.roles.pager.enable {
    # programs.xyz.enable = true;
  };
  config = mkIf config.roles.scripts.enable {
    # programs.xyz.enable = true;
  };
  config = mkIf config.roles.shell.enable {
    # programs.xyz.enable = true;
  };
  config = mkIf config.roles.terminal.enable {
    # programs.xyz.enable = true;
  };
  config = mkIf config.roles.theme.enable {
    # programs.xyz.enable = true;
  };
}
