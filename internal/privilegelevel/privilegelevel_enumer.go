// Code generated by "enumer -type PrivilegeLevel -trimprefix PrivilegeLevel"; DO NOT EDIT.

package privilegelevel

import (
	"fmt"
	"strings"
)

const _PrivilegeLevelName = "SystemUser"

var _PrivilegeLevelIndex = [...]uint8{0, 6, 10}

const _PrivilegeLevelLowerName = "systemuser"

func (i PrivilegeLevel) String() string {
	if i >= PrivilegeLevel(len(_PrivilegeLevelIndex)-1) {
		return fmt.Sprintf("PrivilegeLevel(%d)", i)
	}
	return _PrivilegeLevelName[_PrivilegeLevelIndex[i]:_PrivilegeLevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PrivilegeLevelNoOp() {
	var x [1]struct{}
	_ = x[PrivilegeLevelSystem-(0)]
	_ = x[PrivilegeLevelUser-(1)]
}

var _PrivilegeLevelValues = []PrivilegeLevel{PrivilegeLevelSystem, PrivilegeLevelUser}

var _PrivilegeLevelNameToValueMap = map[string]PrivilegeLevel{
	_PrivilegeLevelName[0:6]:       PrivilegeLevelSystem,
	_PrivilegeLevelLowerName[0:6]:  PrivilegeLevelSystem,
	_PrivilegeLevelName[6:10]:      PrivilegeLevelUser,
	_PrivilegeLevelLowerName[6:10]: PrivilegeLevelUser,
}

var _PrivilegeLevelNames = []string{
	_PrivilegeLevelName[0:6],
	_PrivilegeLevelName[6:10],
}

// PrivilegeLevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PrivilegeLevelString(s string) (PrivilegeLevel, error) {
	if val, ok := _PrivilegeLevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PrivilegeLevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PrivilegeLevel values", s)
}

// PrivilegeLevelValues returns all values of the enum
func PrivilegeLevelValues() []PrivilegeLevel {
	return _PrivilegeLevelValues
}

// PrivilegeLevelStrings returns a slice of all String values of the enum
func PrivilegeLevelStrings() []string {
	strs := make([]string, len(_PrivilegeLevelNames))
	copy(strs, _PrivilegeLevelNames)
	return strs
}

// IsAPrivilegeLevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PrivilegeLevel) IsAPrivilegeLevel() bool {
	for _, v := range _PrivilegeLevelValues {
		if i == v {
			return true
		}
	}
	return false
}
