// Code generated by "enumer -type AccessLevel -trimprefix AccessLevel -linecomment -json -text -transform lower"; DO NOT EDIT.

package accesslevel

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AccessLevelName = "disabledpublicsecret"

var _AccessLevelIndex = [...]uint8{0, 8, 14, 20}

const _AccessLevelLowerName = "disabledpublicsecret"

func (i AccessLevel) String() string {
	if i >= AccessLevel(len(_AccessLevelIndex)-1) {
		return fmt.Sprintf("AccessLevel(%d)", i)
	}
	return _AccessLevelName[_AccessLevelIndex[i]:_AccessLevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AccessLevelNoOp() {
	var x [1]struct{}
	_ = x[AccessLevelDisabled-(0)]
	_ = x[AccessLevelPublic-(1)]
	_ = x[AccessLevelSecret-(2)]
}

var _AccessLevelValues = []AccessLevel{AccessLevelDisabled, AccessLevelPublic, AccessLevelSecret}

var _AccessLevelNameToValueMap = map[string]AccessLevel{
	_AccessLevelName[0:8]:        AccessLevelDisabled,
	_AccessLevelLowerName[0:8]:   AccessLevelDisabled,
	_AccessLevelName[8:14]:       AccessLevelPublic,
	_AccessLevelLowerName[8:14]:  AccessLevelPublic,
	_AccessLevelName[14:20]:      AccessLevelSecret,
	_AccessLevelLowerName[14:20]: AccessLevelSecret,
}

var _AccessLevelNames = []string{
	_AccessLevelName[0:8],
	_AccessLevelName[8:14],
	_AccessLevelName[14:20],
}

// AccessLevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AccessLevelString(s string) (AccessLevel, error) {
	if val, ok := _AccessLevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AccessLevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AccessLevel values", s)
}

// AccessLevelValues returns all values of the enum
func AccessLevelValues() []AccessLevel {
	return _AccessLevelValues
}

// AccessLevelStrings returns a slice of all String values of the enum
func AccessLevelStrings() []string {
	strs := make([]string, len(_AccessLevelNames))
	copy(strs, _AccessLevelNames)
	return strs
}

// IsAAccessLevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AccessLevel) IsAAccessLevel() bool {
	for _, v := range _AccessLevelValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AccessLevel
func (i AccessLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccessLevel
func (i *AccessLevel) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AccessLevel should be a string, got %s", data)
	}

	var err error
	*i, err = AccessLevelString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AccessLevel
func (i AccessLevel) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AccessLevel
func (i *AccessLevel) UnmarshalText(text []byte) error {
	var err error
	*i, err = AccessLevelString(string(text))
	return err
}
