//go:build ignore

package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/dave/jennifer/jen"

	"github.com/hanselrd/dotfiles/internal/privilegelevel"
)

func main() {
	if len(os.Args) != 2 {
		panic(os.Args)
	}

	typeT := os.Args[1]
	lowerTypeT := fmt.Sprintf("%s%s", strings.ToLower(string(typeT[0])), typeT[1:])
	goPackage := os.Getenv("GOPACKAGE")
	goFile := os.Getenv("GOFILE")
	baseFilename := goFile[0 : len(goFile)-len(filepath.Ext(goFile))]
	targetFilename := baseFilename + "_privilegelevelfuncmap.go"

	f := jen.NewFile(goPackage)
	f.PackageComment(
		fmt.Sprintf(
			"Code generated by \"%s %s\"; DO NOT EDIT.",
			filepath.Base(os.Args[0]),
			strings.Join(os.Args[1:], " "),
		),
	)

	f.Var().
		Id(fmt.Sprintf("%sPrivilegeLevelFuncMap", typeT)).
		Op("=").
		Id(fmt.Sprintf("%s%sPrivilegeLevelFuncMap", strings.ToLower(string(typeT[0])), typeT[1:])).
		Values(jen.DictFunc(func(d jen.Dict) {
			for _, pl := range privilegelevel.PrivilegeLevelValues() {
				d[jen.Qual("github.com/hanselrd/dotfiles/internal/privilegelevel", fmt.Sprintf("PrivilegeLevel%s", pl))] = jen.Values(
					jen.Dict{
						jen.Lit("String"):  jen.Id(fmt.Sprintf("%s%sString", pl, typeT)),
						jen.Lit("Values"):  jen.Id(fmt.Sprintf("%s%sValues", pl, typeT)),
						jen.Lit("Strings"): jen.Id(fmt.Sprintf("%s%sStrings", pl, typeT)),
					},
				)
			}
		}))

	f.Type().
		Id(fmt.Sprintf("%sPrivilegeLevelFuncMap", lowerTypeT)).
		Map(jen.Qual("github.com/hanselrd/dotfiles/internal/privilegelevel", "PrivilegeLevel")).
		Map(jen.String()).
		Any()

	f.Func().
		Params(jen.Id("m").Id(fmt.Sprintf("%sPrivilegeLevelFuncMap", lowerTypeT))).
		Id("String").
		Params(jen.Id("pl").Qual("github.com/hanselrd/dotfiles/internal/privilegelevel", "PrivilegeLevel"), jen.Id("s").String()).
		Params(jen.Id(typeT), jen.Error()).
		Block(
			jen.Id("res").
				Op(":=").
				Qual("reflect", "ValueOf").
				Call(jen.Id("m").Index(jen.Id("pl")).Index(jen.Lit("String"))).
				Dot("Call").
				Call(jen.Index().Qual("reflect", "Value").Values(jen.Qual("reflect", "ValueOf").Call(jen.Id("s")))),
			jen.If(jen.List(jen.Err(), jen.Id("ok")).Op(":=").Id("res").Index(jen.Lit(1)).Dot("Interface").Call().Assert(jen.Error()), jen.Id("ok")).
				Block(
					jen.Return(jen.Nil(), jen.Err()),
				),
			jen.Return(jen.Id("res").Index(jen.Lit(0)).Dot("Interface").Call().Assert(jen.Id(typeT)), jen.Nil()),
		)

	f.Func().
		Params(jen.Id("m").Id(fmt.Sprintf("%sPrivilegeLevelFuncMap", lowerTypeT))).
		Id("Values").
		Params(jen.Id("pl").Qual("github.com/hanselrd/dotfiles/internal/privilegelevel", "PrivilegeLevel")).
		Index().Id(typeT).
		Block(
			jen.Id("res").
				Op(":=").
				Qual("reflect", "ValueOf").
				Call(jen.Id("m").Index(jen.Id("pl")).Index(jen.Lit("Values"))).
				Dot("Call").
				Call(jen.Index().Qual("reflect", "Value").Values()),
			jen.Return(jen.Qual("github.com/samber/lo", "RepeatBy").Call(jen.Id("res").Index(jen.Lit(0)).Dot("Len").Call(), jen.Func().Params(jen.Id("i").Int()).Id(typeT).Block(
				jen.Return(jen.Id("res").Index(jen.Lit(0)).Dot("Index").Call(jen.Id("i")).Dot("Interface").Call().Assert(jen.Id(typeT))),
			),
			)),
		)

	f.Func().
		Params(jen.Id("m").Id(fmt.Sprintf("%sPrivilegeLevelFuncMap", lowerTypeT))).
		Id("Strings").
		Params(jen.Id("pl").Qual("github.com/hanselrd/dotfiles/internal/privilegelevel", "PrivilegeLevel")).
		Index().String().
		Block(
			jen.Id("res").
				Op(":=").
				Qual("reflect", "ValueOf").
				Call(jen.Id("m").Index(jen.Id("pl")).Index(jen.Lit("Strings"))).
				Dot("Call").
				Call(jen.Index().Qual("reflect", "Value").Values()),
			jen.Return(jen.Id("res").Index(jen.Lit(0)).Dot("Interface").Call().Assert(jen.Index().String())),
		)

	f.Save(targetFilename)
}
