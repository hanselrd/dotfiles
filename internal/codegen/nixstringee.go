//go:build ignore

package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/dave/jennifer/jen"
)

func main() {
	if len(os.Args) != 2 {
		panic(os.Args)
	}

	typeT := os.Args[1]
	goPackage := os.Getenv("GOPACKAGE")
	goFile := os.Getenv("GOFILE")
	baseFilename := goFile[0 : len(goFile)-len(filepath.Ext(goFile))]
	targetFilename := baseFilename + "_nixstringee.go"

	f := jen.NewFile(goPackage)
	f.PackageComment(
		fmt.Sprintf(
			"Code generated by \"%s %s\"; DO NOT EDIT.",
			filepath.Base(os.Args[0]),
			strings.Join(os.Args[1:], " "),
		),
	)

	f.Comment(fmt.Sprintf("MarshalJSON implements the json.Marshaler interface for %s", typeT))
	f.Func().
		Params(jen.Id("i").Id(typeT)).
		Id("MarshalJSON").
		Params().
		Params(jen.Index().Byte(), jen.Error()).
		Block(
			jen.Return(jen.Qual("encoding/json", "Marshal").Call(jen.Id("i").Dot("NixString").Call())),
		)

	// f.Comment(fmt.Sprintf("UnmarshalJSON implements the json.Unmarshaler interface for %s", typeT))
	// f.Func().
	// 	Params(jen.Id("i").Op("*").Id(typeT)).
	// 	Id("UnmarshalJSON").
	// 	Params(jen.Id("data").Index().Byte()).
	// 	Error().
	// 	Block(
	// 		jen.Var().Id("s").String(),
	// 		jen.If(jen.Err().Op(":=").Qual("encoding/json", "Unmarshal").Call(jen.Id("data"), jen.Op("&").Id("s")), jen.Err().Op("!=").Nil()).
	// 			Block(
	// 				jen.Return(jen.Qual("fmt", "Errorf").Call(jen.Lit(fmt.Sprintf("%s should be a string, got %%s", typeT)), jen.Id("data"))),
	// 			),
	// 		jen.Var().Err().Error(),
	// 		jen.List(jen.Op("*").Id("i"), jen.Err()).
	// 			Op("=").
	// 			Id(fmt.Sprintf("%sString", typeT)).
	// 			Call(jen.Id("s")),
	// 		jen.Return(jen.Err()),
	// 	)

	f.Comment(
		fmt.Sprintf("MarshalText implements the encoding.TextMarshaler interface for %s", typeT),
	)
	f.Func().
		Params(jen.Id("i").Id(typeT)).
		Id("MarshalText").
		Params().
		Params(jen.Index().Byte(), jen.Error()).
		Block(
			jen.Return(jen.Index().Byte().Parens(jen.Id("i").Dot("NixString").Call()), jen.Nil()),
		)

	// f.Comment(
	// 	fmt.Sprintf(
	// 		"UnmarshalText implements the encoding.TextUnmarshaler interface for %s",
	// 		typeT,
	// 	),
	// )
	// f.Func().
	// 	Params(jen.Id("i").Op("*").Id(typeT)).
	// 	Id("UnmarshalText").
	// 	Params(jen.Id("text").Index().Byte()).
	// 	Error().
	// 	Block(
	// 		jen.Var().Err().Error(),
	// 		jen.List(jen.Op("*").Id("i"), jen.Err()).
	// 			Op("=").
	// 			Id(fmt.Sprintf("%sString", typeT)).
	// 			Call(jen.String().Parens(jen.Id("text"))),
	// 		jen.Return(jen.Err()),
	// 	)

	f.Save(targetFilename)
}
