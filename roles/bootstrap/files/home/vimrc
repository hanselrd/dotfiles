" setup Plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

"Plug 'maralla/completor.vim'
Plug 'airblade/vim-gitgutter'
Plug 'chrisbra/Colorizer'
Plug 'chrisbra/unicode.vim'
Plug 'christoomey/vim-sort-motion'
Plug 'christoomey/vim-system-copy'
Plug 'christoomey/vim-titlecase'
Plug 'dense-analysis/ale'
Plug 'easymotion/vim-easymotion'
Plug 'editorconfig/editorconfig-vim'
Plug 'edkolev/tmuxline.vim'
Plug 'itchyny/lightline.vim'
Plug 'itchyny/vim-gitbranch'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-user'
Plug 'ludovicchabant/vim-gutentags'
Plug 'mattn/emmet-vim'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'morhetz/gruvbox'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ntpeters/vim-better-whitespace'
Plug 'rhysd/vim-clang-format'
Plug 'sheerun/vim-polyglot'
Plug 'skywind3000/asyncrun.vim'
Plug 'takac/vim-hardtime'
Plug 'terryma/vim-multiple-cursors'
Plug 'tmux-plugins/vim-tmux'
Plug 'tomasiser/vim-code-dark'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'vim-scripts/ReplaceWithRegister'

if v:version >= 800
endif

call plug#end()

" START PLUGIN CONFIGURATION

" Plug 'airblade/vim-gitgutter'

" Plug 'chrisbra/Colorizer'
"let g:colorizer_auto_color=1
"let g:colorizer_auto_filetype='css,html'
let g:colorizer_disable_bufleave=1

" Plug 'chrisbra/unicode.vim'

" Plug 'christoomey/vim-sort-motion'

" Plug 'christoomey/vim-system-copy'
let g:system_copy#copy_command='xclip -sel clipboard'
let g:system_copy#paste_command='xclip -sel clipboard -o'

" Plug 'christoomey/vim-titlecase'

" Plug 'dense-analysis/ale'
let g:ale_linters_explicit=1

" Plug 'easymotion/vim-easymotion'

" Plug 'editorconfig/editorconfig-vim'

" Plug 'edkolev/tmuxline.vim'
let g:tmuxline_preset='full'
let g:tmuxline_powerline_separators=0

" Plug 'itchyny/lightline.vim'
set laststatus=2
set noshowmode
let g:lightline={
    \ 'colorscheme': 'deus',
    \ 'active': {
    \   'left': [['mode', 'paste'],
    \            ['gitbranch', 'readonly', 'filename', 'modified']]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'fugitive#head'
    \ }
    \ }

" Plug 'itchyny/vim-gitbranch'

" Plug 'junegunn/fzf'

" Plug 'junegunn/fzf.vim'
nnoremap <C-p> :Files<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>h :History<CR>
nnoremap <Leader>t :BTags<CR>
nnoremap <Leader>T :Tags<CR>

" Plug 'kana/vim-textobj-entire'

" Plug 'kana/vim-textobj-indent'

" Plug 'kana/vim-textobj-line'

" Plug 'kana/vim-textobj-user'

" Plug 'ludovicchabant/vim-gutentags'
let g:gutentags_cache_dir='~/.cache/gutentags'

" Plug 'maralla/completor.vim'
let g:completor_clang_binary='/usr/bin/clang'
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"

" Plug 'mattn/emmet-vim'
let g:user_emmet_leader_key='<Tab>'
let g:user_emmet_settings={
    \ 'javascript' : {
    \   'extends': 'jsx',
    \ },
    \ 'typescript' : {
    \   'extends': 'tsx',
    \ },
    \ 'typescriptreact' : {
    \   'extends': 'tsx',
    \ },
    \ }

" Plug 'mengelbrecht/lightline-bufferline'
set showtabline=2
let g:lightline#bufferline#show_number=1
let g:lightline#bufferline#shorten_path=0
let g:lightline#bufferline#unnamed='[No Name]'
let g:lightline#bufferline#number_map={
\ 0: '‚Å∞', 1: '¬π', 2: '¬≤', 3: '¬≥', 4: '‚Å¥',
\ 5: '‚Åµ', 6: '‚Å∂', 7: '‚Å∑', 8: '‚Å∏', 9: '‚Åπ'}
let g:lightline.tabline={'left': [['buffers']], 'right': [['']]}
let g:lightline.component_expand={'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type={'buffers': 'tabsel'}

" Plug 'morhetz/gruvbox'

" Plug 'neoclide/coc.nvim', {'branch': 'release'}
set hidden
"set nobackup
"set nowritebackup
set updatetime=300
"set shortmess+=c
"set signcolumn=yes
let g:coc_global_extensions=['coc-json', 'coc-tsserver', 'coc-html', 'coc-css', 'coc-tailwindcss', 'coc-prettier', 'coc-python', 'coc-markdownlint', 'coc-rls']
command! -nargs=0 Prettier :CocCommand prettier.formatFile
vmap <Leader>f <Plug>(coc-format-selected)
nmap <Leader>f <Plug>(coc-format-selected)

" Plug 'rhysd/vim-clang-format'
"let g:clang_format#style_options={
"    \ "Standard": "Cpp11",
"    \ "BreakBeforeBraces": "Attach",
"    \ "AccessModifierOffset": -4,
"    \ "AllowShortIfStatementsOnASingleLine": "true"
"    \ }
"autocmd FileType c,cpp,objc ClangFormatAutoEnable

" Plug 'sheerun/vim-polyglot'

" Plug 'skywind3000/asyncrun.vim'
"autocmd BufWritePost *.ts,*.tsx AsyncRun -post=checktime npm run format %

" Plug 'takac/vim-hardtime'
let g:hardtime_default_on=1
let g:list_of_normal_keys=[]
let g:list_of_visual_keys=[]
let g:list_of_insert_keys=[]
"let g:list_of_disabled_keys=['<Up>', '<Down>', '<Left>', '<Right>', '<Insert>', '<Del>', '<Home>', '<End>', '<PageUp>', '<PageDown>']
let g:list_of_disabled_keys=['<Insert>', '<Del>', '<Home>', '<End>', '<PageUp>', '<PageDown>']
let g:hardtime_timeout=5000

" Plug 'terryma/vim-multiple-cursors'

" Plug 'tmux-plugins/vim-tmux'

" Plug 'tomasiser/vim-code-dark'

" Plug 'tpope/vim-commentary'
autocmd FileType jinja2 setlocal commentstring={#\ %s\ #}
autocmd FileType markdown setlocal commentstring=<!--\ %s\ -->

" Plug 'tpope/vim-eunuch'

" Plug 'tpope/vim-fugitive'

" Plug 'tpope/vim-surround'

" Plug 'tpope/vim-vinegar'

" Plug 'vim-scripts/ReplaceWithRegister'

" END PLUGIN CONFIGURATION

" line numbers and color
set number
set relativenumber
set hlsearch
"colorscheme codedark
colorscheme gruvbox
set cursorline
"set colorcolumn=100
fun! ToggleCC()
    if &cc == ''
        set cc=100
    else
        set cc=
    endif
endfun
command! ToggleCC call ToggleCC()
nnoremap <Leader>cc :ToggleCC<CR>
set background=dark
set backupcopy=yes

" indentation
set tabstop=8
set softtabstop=0
set expandtab
set shiftwidth=4
set smarttab
set backspace=indent,eol,start
set tw=0

" highlight whitespace
set list
set listchars=
"set listchars+=eol:‚Ü≤
set listchars+=tab:‚Üí\
set listchars+=trail:‚àô
set listchars+=extends:¬ª
set listchars+=precedes:¬´
set listchars+=nbsp:‚£ø
set showbreak=‚Ü™\
"if has('patch-7.4.710')
"   set listchars+=space:êÑô
"endif

" search down into subfolders
" provides tab-completion for all file-related tasks
set path+=**

" display all matching files when tab completing
set wildmenu

" create the `tags` file
command! MakeTags !ctags -R .

" tweaks for file browsing
"let g:netrw_banner=0
"let g:netrw_browse_split=4
"let g:netrw_altv=1
"let g:netrw_liststyle=3
"let g:netrw_list_hide=netrw_gitignore#Hide()
"let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'
let g:netrw_fastbrowse=0

" nice to haves
"cnoremap w!! execute 'silent! write !sudo tee % > /dev/null' <bar> edit!
cnoremap w!! SudoWrite
"fun! TrimWhitespace()
"    let l:save = winsaveview()
"    keeppatterns %s/\s\+$//e
"    call winrestview(l:save)
"endfun
"command! TrimWhitespace call TrimWhitespace()
